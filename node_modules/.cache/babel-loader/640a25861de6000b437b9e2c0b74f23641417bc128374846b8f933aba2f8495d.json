{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// This line tells ESLint to ignore the following global variables that are provided by the Canvas environment.\n/* global __app_id, __firebase_config, __initial_auth_token */\n\nimport { useState, useEffect, useRef } from 'react';\n// Import the core Firebase App functions\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { Send, Bot } from 'lucide-react'; // Using Lucide for a modern icon\n\n// This is the main App component for our chat application.\n// It handles all the UI, state management, and Firebase interactions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State to hold the chat messages. An array of objects.\n  const [messages, setMessages] = useState([]);\n  // State to hold the user's input in the text field.\n  const [input, setInput] = useState('');\n  // State to hold the Firebase database instance.\n  const [db, setDb] = useState(null);\n  // State to hold the current user's ID.\n  const [userId, setUserId] = useState(null);\n  // State to track if an AI response is being generated.\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\n  // State to hold any authentication or initialization errors.\n  const [error, setError] = useState(null);\n  // A ref to automatically scroll to the latest message.\n  const messagesEndRef = useRef(null);\n\n  // A fallback Firebase configuration in case the provided global variable is not available.\n  const fallbackFirebaseConfig = {\n    apiKey: \"AIzaSyDhJoNaFf0qgl4VTuUXj16ysJG1hycq-p8\",\n    authDomain: \"ai-chatbot-88602.firebaseapp.com\",\n    projectId: \"ai-chatbot-88602\",\n    storageBucket: \"ai-chatbot-88602.firebasestorage.app\",\n    messagingSenderId: \"167580287666\",\n    appId: \"1:167580287666:web:9e8313ae6e667e47d47fab\"\n  };\n\n  // useEffect to handle Firebase initialization and authentication.\n  // The empty dependency array `[]` ensures this runs only once on component mount.\n  useEffect(() => {\n    // Get the Firebase configuration. Prioritize the one provided by the environment.\n    let firebaseConfig = fallbackFirebaseConfig;\n    try {\n      if (typeof __firebase_config !== 'undefined') {\n        firebaseConfig = JSON.parse(__firebase_config);\n      }\n    } catch (e) {\n      console.error(\"Failed to parse __firebase_config:\", e);\n      setError(\"Failed to parse Firebase configuration.\");\n      return;\n    }\n\n    // Check if the firebaseConfig object is valid before proceeding.\n    if (!firebaseConfig || !firebaseConfig.projectId) {\n      const configError = \"Firebase configuration is missing. Please provide a valid config.\";\n      console.error(configError);\n      setError(configError);\n      return;\n    }\n    try {\n      console.log(\"[FIREBASE] Initializing Firebase app...\");\n      const app = getApps().length ? getApp() : initializeApp(firebaseConfig);\n      const auth = getAuth(app);\n      const firestore = getFirestore(app);\n\n      // Listen for authentication state changes. This is the most reliable way to handle auth.\n      const unsubscribeAuth = onAuthStateChanged(auth, async user => {\n        if (user) {\n          // User is signed in.\n          console.log(\"[FIREBASE] User signed in with UID:\", user.uid);\n          setUserId(user.uid);\n          setDb(firestore);\n          setError(null);\n        } else {\n          // User is signed out, or a new session has started.\n          console.log(\"[FIREBASE] User is not signed in. Attempting sign-in...\");\n          const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n          try {\n            if (initialAuthToken) {\n              await signInWithCustomToken(auth, initialAuthToken);\n            } else {\n              await signInAnonymously(auth);\n            }\n          } catch (e) {\n            console.error(\"[FIREBASE] Sign-in failed:\", e);\n            setError(`Error: Sign-in failed. Reason: ${e.message}`);\n          }\n        }\n      });\n\n      // Cleanup function to unsubscribe from the auth listener when the component unmounts.\n      return () => unsubscribeAuth();\n    } catch (e) {\n      console.error(\"[FIREBASE] Initialization failed:\", e.message);\n      setError(`Error: Firebase initialization failed. Please check the console for more details. Reason: ${e.message}`);\n    }\n  }, []);\n\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\n  // This effect will run whenever `db` or `userId` changes, ensuring Firestore is ready.\n  useEffect(() => {\n    // We only attach the listener if Firebase is fully initialized and authenticated.\n    if (db && userId) {\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n\n      // Create a query to get messages from the 'messages' collection.\n      const q = query(collection(db, path));\n      const unsubscribe = onSnapshot(q, querySnapshot => {\n        const fetchedMessages = [];\n        querySnapshot.forEach(doc => {\n          fetchedMessages.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        // Sort the messages by timestamp to ensure they are in the correct order.\n        fetchedMessages.sort((a, b) => {\n          var _a$timestamp, _b$timestamp;\n          return (((_a$timestamp = a.timestamp) === null || _a$timestamp === void 0 ? void 0 : _a$timestamp.toMillis()) || 0) - (((_b$timestamp = b.timestamp) === null || _b$timestamp === void 0 ? void 0 : _b$timestamp.toMillis()) || 0);\n        });\n        setMessages(fetchedMessages);\n      }, firestoreError => {\n        console.error(\"Error fetching messages:\", firestoreError);\n        setError(\"Failed to fetch messages. Check your Firestore rules and connection.\");\n      });\n      return () => unsubscribe();\n    }\n  }, [db, userId]);\n\n  // Use a separate useEffect to handle AI responses to user messages\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    // Check if the last message is from the user and an AI response is not already in progress.\n    if (db && lastMessage && lastMessage.userId === userId && !isAIGenerating) {\n      const getAIResponse = async () => {\n        setIsAIGenerating(true);\n        console.log(\"[AI] User sent a message. Generating AI response...\");\n        try {\n          // Prepare chat history for the API call.\n          const chatHistory = messages.map(msg => ({\n            role: msg.userId === userId ? 'user' : 'model',\n            parts: [{\n              text: msg.text\n            }]\n          }));\n          const payload = {\n            contents: chatHistory\n          };\n          const apiKey = \"\"; // API key is automatically provided by the Canvas environment\n          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n          let response;\n          let retryCount = 0;\n          const maxRetries = 5;\n          const initialDelay = 1000;\n          while (retryCount < maxRetries) {\n            try {\n              response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n              });\n              if (response.status !== 429) {\n                break;\n              }\n              console.warn(`[API] Rate limit hit. Retrying in ${initialDelay * Math.pow(2, retryCount)}ms...`);\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\n              retryCount++;\n            } catch (fetchError) {\n              console.error(`[API] Fetch failed. Retrying...`, fetchError);\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\n              retryCount++;\n            }\n          }\n          if (!response || !response.ok) {\n            var _response;\n            throw new Error(`API error: ${((_response = response) === null || _response === void 0 ? void 0 : _response.statusText) || 'Unknown error'}`);\n          }\n          const result = await response.json();\n          let responseText = \"Sorry, I couldn't generate a response.\";\n          if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n            responseText = result.candidates[0].content.parts[0].text;\n            console.log(\"[AI] Generated AI response successfully.\");\n          }\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\n          await addDoc(collection(db, path), {\n            text: responseText,\n            userId: 'bot',\n            timestamp: serverTimestamp()\n          });\n        } catch (e) {\n          console.error(\"[AI ERROR] Error getting AI response:\", e);\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\n          await addDoc(collection(db, path), {\n            text: `Sorry, I am having trouble processing that request. Error: ${e.message}`,\n            userId: 'bot',\n            timestamp: serverTimestamp()\n          });\n        } finally {\n          setIsAIGenerating(false);\n        }\n      };\n      getAIResponse();\n    }\n  }, [messages, db, isAIGenerating, userId]);\n\n  // Function to handle sending a new message.\n  const handleSendMessage = async () => {\n    if (input.trim() === '' || !db || !userId) {\n      console.log(\"Cannot send empty message or Firebase not ready.\");\n      return;\n    }\n    try {\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n      await addDoc(collection(db, path), {\n        text: input,\n        userId: userId,\n        timestamp: serverTimestamp()\n      });\n      setInput('');\n    } catch (error) {\n      console.error(\"Error adding document: \", error);\n      setError(\"Failed to send message. Please try again.\");\n    }\n  };\n\n  // Function to handle key presses in the input field.\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  // A useEffect to scroll the chat window to the bottom whenever new messages arrive.\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // CSS for the dot-flashing loading animation. This is in a template literal\n  // because we don't have an external CSS file for React immersives.\n  const dotFlashingCss = `\n    .dot-flashing {\n      position: relative;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite linear alternate;\n      animation-delay: .5s;\n    }\n    .dot-flashing::before, .dot-flashing::after {\n      content: '';\n      display: inline-block;\n      position: absolute;\n      top: 0;\n    }\n    .dot-flashing::before {\n      left: -10px;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite alternate;\n    }\n    .dot-flashing::after {\n      left: 10px;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite alternate;\n      animation-delay: 1s;\n    }\n    @keyframes dotFlashing {\n      0% { background-color: #efefef; }\n      50%, 100% { background-color: #9e9e9e; }\n    }\n  `;\n  return (\n    /*#__PURE__*/\n    // Main container with a dark background and full viewport height/width.\n    // It uses flexbox to center the chat container both horizontally and vertically.\n    _jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: dotFlashingCss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full max-w-sm md:max-w-md bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\",\n          children: \"AI Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 p-4 overflow-y-auto space-y-4\",\n          children: [!db && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-slate-400 mt-10\",\n            children: \"Initializing Firebase...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-red-400 mt-10 p-4 bg-red-900 rounded-lg\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), db && !error && messages.map((message, index) =>\n          /*#__PURE__*/\n          // A message bubble. We use different styles for the current user's messages and the bot's.\n          _jsxDEV(\"div\", {\n            className: `flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `max-w-[70%] p-3 rounded-2xl shadow-md ${message.userId === userId ? 'bg-blue-600 text-white' // User's message style\n              : 'bg-slate-700 text-slate-100' // Bot's message style\n              } ${message.userId === userId ? 'rounded-br-none' // Make the bottom-right corner sharp for user messages\n              : 'rounded-bl-none' // Make the bottom-left corner sharp for bot messages\n              }`,\n              children: [message.userId === 'bot' && /*#__PURE__*/_jsxDEV(Bot, {\n                size: 16,\n                className: \"inline-block mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 46\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm break-words inline-block\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 17\n              }, this), message.userId !== 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-slate-400 mt-1\",\n                children: [\"User: \", message.userId.substring(0, 8), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)), isAIGenerating && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start justify-start\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 rounded-2xl bg-slate-700 text-slate-100 max-w-[70%] rounded-bl-none\",\n              children: [/*#__PURE__*/_jsxDEV(Bot, {\n                size: 16,\n                className: \"inline-block mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dot-flashing inline-block align-middle ml-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\",\n            placeholder: \"Type your message...\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyDown: handleKeyDown\n            // Disable input if not ready or if an error occurred\n            ,\n            disabled: !db || isAIGenerating || !!error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            className: \"ml-3 p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\",\n            disabled: !db || input.trim() === '' || isAIGenerating || !!error,\n            children: /*#__PURE__*/_jsxDEV(Send, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"W9/oqDqcTfxra/k1CotRCkWhk8U=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","initializeApp","getApps","getApp","getAuth","signInWithCustomToken","signInAnonymously","onAuthStateChanged","getFirestore","collection","query","onSnapshot","addDoc","serverTimestamp","Send","Bot","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","db","setDb","userId","setUserId","isAIGenerating","setIsAIGenerating","error","setError","messagesEndRef","fallbackFirebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseConfig","__firebase_config","JSON","parse","e","console","configError","log","app","length","auth","firestore","unsubscribeAuth","user","uid","initialAuthToken","__initial_auth_token","message","currentAppId","__app_id","path","q","unsubscribe","querySnapshot","fetchedMessages","forEach","doc","push","id","data","sort","a","b","_a$timestamp","_b$timestamp","timestamp","toMillis","firestoreError","lastMessage","getAIResponse","chatHistory","map","msg","role","parts","text","payload","contents","apiUrl","response","retryCount","maxRetries","initialDelay","fetch","method","headers","body","stringify","status","warn","Math","pow","Promise","resolve","setTimeout","fetchError","ok","_response","Error","statusText","result","json","responseText","candidates","content","handleSendMessage","trim","handleKeyDown","event","key","_messagesEndRef$curre","current","scrollIntoView","behavior","dotFlashingCss","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","size","substring","ref","type","placeholder","value","onChange","target","onKeyDown","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/App.js"],"sourcesContent":["// This line tells ESLint to ignore the following global variables that are provided by the Canvas environment.\r\n/* global __app_id, __firebase_config, __initial_auth_token */\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\n// Import the core Firebase App functions\r\nimport { initializeApp, getApps, getApp } from 'firebase/app';\r\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { Send, Bot } from 'lucide-react'; // Using Lucide for a modern icon\r\n\r\n// This is the main App component for our chat application.\r\n// It handles all the UI, state management, and Firebase interactions.\r\nexport default function App() {\r\n  // State to hold the chat messages. An array of objects.\r\n  const [messages, setMessages] = useState([]);\r\n  // State to hold the user's input in the text field.\r\n  const [input, setInput] = useState('');\r\n  // State to hold the Firebase database instance.\r\n  const [db, setDb] = useState(null);\r\n  // State to hold the current user's ID.\r\n  const [userId, setUserId] = useState(null);\r\n  // State to track if an AI response is being generated.\r\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\r\n  // State to hold any authentication or initialization errors.\r\n  const [error, setError] = useState(null);\r\n  // A ref to automatically scroll to the latest message.\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // A fallback Firebase configuration in case the provided global variable is not available.\r\n  const fallbackFirebaseConfig = {\r\n    apiKey: \"AIzaSyDhJoNaFf0qgl4VTuUXj16ysJG1hycq-p8\",\r\n    authDomain: \"ai-chatbot-88602.firebaseapp.com\",\r\n    projectId: \"ai-chatbot-88602\",\r\n    storageBucket: \"ai-chatbot-88602.firebasestorage.app\",\r\n    messagingSenderId: \"167580287666\",\r\n    appId: \"1:167580287666:web:9e8313ae6e667e47d47fab\"\r\n  };\r\n\r\n  // useEffect to handle Firebase initialization and authentication.\r\n  // The empty dependency array `[]` ensures this runs only once on component mount.\r\n  useEffect(() => {\r\n    // Get the Firebase configuration. Prioritize the one provided by the environment.\r\n    let firebaseConfig = fallbackFirebaseConfig;\r\n    try {\r\n      if (typeof __firebase_config !== 'undefined') {\r\n        firebaseConfig = JSON.parse(__firebase_config);\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Failed to parse __firebase_config:\", e);\r\n      setError(\"Failed to parse Firebase configuration.\");\r\n      return;\r\n    }\r\n\r\n    // Check if the firebaseConfig object is valid before proceeding.\r\n    if (!firebaseConfig || !firebaseConfig.projectId) {\r\n      const configError = \"Firebase configuration is missing. Please provide a valid config.\";\r\n      console.error(configError);\r\n      setError(configError);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(\"[FIREBASE] Initializing Firebase app...\");\r\n      const app = getApps().length ? getApp() : initializeApp(firebaseConfig);\r\n      const auth = getAuth(app);\r\n      const firestore = getFirestore(app);\r\n\r\n      // Listen for authentication state changes. This is the most reliable way to handle auth.\r\n      const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          // User is signed in.\r\n          console.log(\"[FIREBASE] User signed in with UID:\", user.uid);\r\n          setUserId(user.uid);\r\n          setDb(firestore);\r\n          setError(null);\r\n        } else {\r\n          // User is signed out, or a new session has started.\r\n          console.log(\"[FIREBASE] User is not signed in. Attempting sign-in...\");\r\n          const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n          try {\r\n            if (initialAuthToken) {\r\n              await signInWithCustomToken(auth, initialAuthToken);\r\n            } else {\r\n              await signInAnonymously(auth);\r\n            }\r\n          } catch (e) {\r\n            console.error(\"[FIREBASE] Sign-in failed:\", e);\r\n            setError(`Error: Sign-in failed. Reason: ${e.message}`);\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Cleanup function to unsubscribe from the auth listener when the component unmounts.\r\n      return () => unsubscribeAuth();\r\n\r\n    } catch (e) {\r\n      console.error(\"[FIREBASE] Initialization failed:\", e.message);\r\n      setError(`Error: Firebase initialization failed. Please check the console for more details. Reason: ${e.message}`);\r\n    }\r\n  }, []);\r\n\r\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\r\n  // This effect will run whenever `db` or `userId` changes, ensuring Firestore is ready.\r\n  useEffect(() => {\r\n    // We only attach the listener if Firebase is fully initialized and authenticated.\r\n    if (db && userId) {\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      \r\n      // Create a query to get messages from the 'messages' collection.\r\n      const q = query(collection(db, path));\r\n      \r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n        const fetchedMessages = [];\r\n        querySnapshot.forEach((doc) => {\r\n          fetchedMessages.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        // Sort the messages by timestamp to ensure they are in the correct order.\r\n        fetchedMessages.sort((a, b) => (a.timestamp?.toMillis() || 0) - (b.timestamp?.toMillis() || 0));\r\n        setMessages(fetchedMessages);\r\n      }, (firestoreError) => {\r\n        console.error(\"Error fetching messages:\", firestoreError);\r\n        setError(\"Failed to fetch messages. Check your Firestore rules and connection.\");\r\n      });\r\n      \r\n      return () => unsubscribe();\r\n    }\r\n  }, [db, userId]);\r\n\r\n  // Use a separate useEffect to handle AI responses to user messages\r\n  useEffect(() => {\r\n    const lastMessage = messages[messages.length - 1];\r\n    // Check if the last message is from the user and an AI response is not already in progress.\r\n    if (db && lastMessage && lastMessage.userId === userId && !isAIGenerating) {\r\n      const getAIResponse = async () => {\r\n        setIsAIGenerating(true);\r\n        console.log(\"[AI] User sent a message. Generating AI response...\");\r\n\r\n        try {\r\n          // Prepare chat history for the API call.\r\n          const chatHistory = messages.map(msg => ({\r\n            role: msg.userId === userId ? 'user' : 'model',\r\n            parts: [{ text: msg.text }]\r\n          }));\r\n          \r\n          const payload = { contents: chatHistory };\r\n          const apiKey = \"\"; // API key is automatically provided by the Canvas environment\r\n          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n          \r\n          let response;\r\n          let retryCount = 0;\r\n          const maxRetries = 5;\r\n          const initialDelay = 1000;\r\n\r\n          while (retryCount < maxRetries) {\r\n            try {\r\n              response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n              });\r\n              if (response.status !== 429) {\r\n                break;\r\n              }\r\n              console.warn(`[API] Rate limit hit. Retrying in ${initialDelay * Math.pow(2, retryCount)}ms...`);\r\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\r\n              retryCount++;\r\n            } catch (fetchError) {\r\n              console.error(`[API] Fetch failed. Retrying...`, fetchError);\r\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\r\n              retryCount++;\r\n            }\r\n          }\r\n          \r\n          if (!response || !response.ok) {\r\n            throw new Error(`API error: ${response?.statusText || 'Unknown error'}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          let responseText = \"Sorry, I couldn't generate a response.\";\r\n          if (result.candidates && result.candidates.length > 0 &&\r\n              result.candidates[0].content && result.candidates[0].content.parts &&\r\n              result.candidates[0].content.parts.length > 0) {\r\n            responseText = result.candidates[0].content.parts[0].text;\r\n            console.log(\"[AI] Generated AI response successfully.\");\r\n          }\r\n\r\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n          await addDoc(collection(db, path), {\r\n            text: responseText,\r\n            userId: 'bot',\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        } catch (e) {\r\n          console.error(\"[AI ERROR] Error getting AI response:\", e);\r\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n          await addDoc(collection(db, path), {\r\n            text: `Sorry, I am having trouble processing that request. Error: ${e.message}`,\r\n            userId: 'bot',\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        } finally {\r\n          setIsAIGenerating(false);\r\n        }\r\n      };\r\n\r\n      getAIResponse();\r\n    }\r\n  }, [messages, db, isAIGenerating, userId]);\r\n\r\n  // Function to handle sending a new message.\r\n  const handleSendMessage = async () => {\r\n    if (input.trim() === '' || !db || !userId) {\r\n      console.log(\"Cannot send empty message or Firebase not ready.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      \r\n      await addDoc(collection(db, path), {\r\n        text: input,\r\n        userId: userId,\r\n        timestamp: serverTimestamp(),\r\n      });\r\n      setInput('');\r\n    } catch (error) {\r\n      console.error(\"Error adding document: \", error);\r\n      setError(\"Failed to send message. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Function to handle key presses in the input field.\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // A useEffect to scroll the chat window to the bottom whenever new messages arrive.\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // CSS for the dot-flashing loading animation. This is in a template literal\r\n  // because we don't have an external CSS file for React immersives.\r\n  const dotFlashingCss = `\r\n    .dot-flashing {\r\n      position: relative;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite linear alternate;\r\n      animation-delay: .5s;\r\n    }\r\n    .dot-flashing::before, .dot-flashing::after {\r\n      content: '';\r\n      display: inline-block;\r\n      position: absolute;\r\n      top: 0;\r\n    }\r\n    .dot-flashing::before {\r\n      left: -10px;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite alternate;\r\n    }\r\n    .dot-flashing::after {\r\n      left: 10px;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite alternate;\r\n      animation-delay: 1s;\r\n    }\r\n    @keyframes dotFlashing {\r\n      0% { background-color: #efefef; }\r\n      50%, 100% { background-color: #9e9e9e; }\r\n    }\r\n  `;\r\n\r\n  return (\r\n    // Main container with a dark background and full viewport height/width.\r\n    // It uses flexbox to center the chat container both horizontally and vertically.\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\">\r\n      {/* Inject the custom CSS for the loading animation */}\r\n      <style>{dotFlashingCss}</style>\r\n\r\n      {/* The main chat container. It's a responsive box with a dark background. */}\r\n      <div className=\"flex flex-col w-full max-w-sm md:max-w-md bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\">\r\n        \r\n        {/* Header section for the chat window. */}\r\n        <div className=\"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\">\r\n          AI Chatbot\r\n        </div>\r\n\r\n        {/* Display area for the messages. It's a scrollable container. */}\r\n        <div className=\"flex-1 p-4 overflow-y-auto space-y-4\">\r\n          {/* Display loading, error, or messages */}\r\n          {!db && !error && (\r\n            <div className=\"text-center text-slate-400 mt-10\">\r\n              Initializing Firebase...\r\n            </div>\r\n          )}\r\n          {error && (\r\n            <div className=\"text-center text-red-400 mt-10 p-4 bg-red-900 rounded-lg\">\r\n              Error: {error}\r\n            </div>\r\n          )}\r\n          {db && !error && messages.map((message, index) => (\r\n            // A message bubble. We use different styles for the current user's messages and the bot's.\r\n            <div\r\n              key={index}\r\n              className={`flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`}\r\n            >\r\n              <div\r\n                className={`max-w-[70%] p-3 rounded-2xl shadow-md ${\r\n                  message.userId === userId\r\n                    ? 'bg-blue-600 text-white' // User's message style\r\n                    : 'bg-slate-700 text-slate-100' // Bot's message style\r\n                } ${\r\n                  message.userId === userId\r\n                    ? 'rounded-br-none' // Make the bottom-right corner sharp for user messages\r\n                    : 'rounded-bl-none' // Make the bottom-left corner sharp for bot messages\r\n                }`}\r\n              >\r\n                {/* Conditionally render the bot icon for bot messages */}\r\n                {message.userId === 'bot' && <Bot size={16} className=\"inline-block mr-2\" />}\r\n                {/* The message text. */}\r\n                <p className=\"text-sm break-words inline-block\">{message.text}</p>\r\n                {/* Optional: Display the user ID for collaborative context */}\r\n                {message.userId !== 'bot' && (\r\n                  <div className=\"text-xs text-slate-400 mt-1\">\r\n                    User: {message.userId.substring(0, 8)}...\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* AI generating message indicator */}\r\n          {isAIGenerating && (\r\n            <div className=\"flex items-start justify-start\">\r\n              <div className=\"p-3 rounded-2xl bg-slate-700 text-slate-100 max-w-[70%] rounded-bl-none\">\r\n                <Bot size={16} className=\"inline-block mr-2\" />\r\n                <div className=\"dot-flashing inline-block align-middle ml-2\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* This empty div is our scroll anchor. */}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Input area for sending messages. */}\r\n        <div className=\"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl flex items-center\">\r\n          {/* The text input field. */}\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            // Disable input if not ready or if an error occurred\r\n            disabled={!db || isAIGenerating || !!error}\r\n          />\r\n          {/* The send button. It's disabled if the input is empty or not authenticated. */}\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"ml-3 p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            disabled={!db || input.trim() === '' || isAIGenerating || !!error}\r\n          >\r\n            {/* Using the Send icon from lucide-react */}\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}