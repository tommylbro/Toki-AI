{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\AIChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';\nimport { getFirestore, collection, query, orderBy, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { getFunctions, httpsCallable } from 'firebase/functions';\n\n// Component to display a single message\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = ({\n  text,\n  from\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `flex my-2 ${from === 'user' ? 'justify-end' : 'justify-start'}`,\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `p-3 rounded-lg max-w-xs md:max-w-md lg:max-w-lg ${from === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 5\n}, this);\n\n// Component for the message input area\n_c = Message;\nconst MessageInput = ({\n  message,\n  setMessage,\n  handleSendMessage,\n  isSending,\n  isAuthenticated\n}) => {\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-white border-t flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      onKeyDown: handleKeyDown,\n      className: \"flex-1 p-2 border rounded-lg focus:outline-none\",\n      placeholder: isAuthenticated ? \"Type your message here...\" : \"Connecting...\",\n      disabled: isSending || !isAuthenticated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      className: `ml-2 p-2 rounded-lg text-white ${isSending || !isAuthenticated ? 'bg-gray-400' : 'bg-blue-500'}`,\n      disabled: isSending || !isAuthenticated,\n      children: isSending ? 'Sending...' : 'Send'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n// Main Chatbot component\n_c2 = MessageInput;\nconst AIChatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const messagesEndRef = useRef(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [db, setDb] = useState(null);\n\n  // Initialize Firebase and set up authentication listener\n  useEffect(() => {\n    let app;\n    const firebaseConfig = window.api.getFirebaseConfig();\n    const authToken = window.api.getAuthToken();\n    if (!getApps().length) {\n      if (firebaseConfig && firebaseConfig.projectId) {\n        app = initializeApp(firebaseConfig);\n      } else {\n        console.error(\"Firebase config is not defined. Please ensure it's available globally.\");\n        return;\n      }\n    } else {\n      app = getApp();\n    }\n    setDb(getFirestore(app));\n    const auth = getAuth(app);\n    const unsubscribeAuth = onAuthStateChanged(auth, user => {\n      setIsAuthenticated(!!user);\n    });\n    if (authToken) {\n      signInWithCustomToken(auth, authToken).catch(error => {\n        console.error(\"Error signing in with custom token:\", error);\n      });\n    } else {\n      signInAnonymously(auth).catch(error => {\n        console.error(\"Error signing in anonymously:\", error);\n      });\n    }\n    return () => {\n      unsubscribeAuth();\n    };\n  }, []);\n\n  // Listen for messages from Firestore\n  useEffect(() => {\n    const appId = window.api.getAppId();\n    if (db && appId) {\n      const q = query(collection(db, 'chats', appId, 'messages'), orderBy('createdAt'));\n      const unsubscribe = onSnapshot(q, snapshot => {\n        const newMessages = snapshot.docs.map(doc => doc.data());\n        setMessages(newMessages);\n      });\n      return () => unsubscribe();\n    }\n  }, [db]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!message.trim() || isSending || !isAuthenticated) return;\n    setIsSending(true);\n    const userMessage = {\n      text: message,\n      from: 'user',\n      createdAt: serverTimestamp()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setMessage('');\n    try {\n      const appId = window.api.getAppId();\n      if (db && appId) {\n        await addDoc(collection(db, 'chats', appId, 'messages'), userMessage);\n      } else {\n        throw new Error(\"Firestore database or app ID is not initialized.\");\n      }\n      const functions = getFunctions();\n      const callChatbot = httpsCallable(functions, 'chatbot');\n      const messagesForFunction = [...messages, userMessage].map(msg => ({\n        text: msg.text,\n        from: msg.from\n      }));\n      await callChatbot({\n        messages: messagesForFunction\n      });\n    } catch (error) {\n      console.error(\"Error sending message or calling chatbot function:\", error);\n      const errorMessage = {\n        text: \"Sorry, I am unable to respond at this time.\",\n        from: \"ai\",\n        createdAt: serverTimestamp()\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsSending(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        from: msg.from\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      message: message,\n      setMessage: setMessage,\n      handleSendMessage: sendMessage,\n      isSending: isSending,\n      isAuthenticated: isAuthenticated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(AIChatbot, \"+fqp+86tHQbzSwXaRYOGQ8tSyPA=\");\n_c3 = AIChatbot;\nexport default AIChatbot;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"MessageInput\");\n$RefreshReg$(_c3, \"AIChatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initializeApp","getApps","getApp","getAuth","signInAnonymously","onAuthStateChanged","signInWithCustomToken","getFirestore","collection","query","orderBy","onSnapshot","addDoc","serverTimestamp","getFunctions","httpsCallable","jsxDEV","_jsxDEV","Message","text","from","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MessageInput","message","setMessage","handleSendMessage","isSending","isAuthenticated","handleKeyDown","e","key","type","value","onChange","target","onKeyDown","placeholder","disabled","onClick","_c2","AIChatbot","_s","messages","setMessages","setIsSending","messagesEndRef","setIsAuthenticated","db","setDb","app","firebaseConfig","window","api","getFirebaseConfig","authToken","getAuthToken","length","projectId","console","error","auth","unsubscribeAuth","user","catch","appId","getAppId","q","unsubscribe","snapshot","newMessages","docs","map","doc","data","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","userMessage","createdAt","prevMessages","Error","functions","callChatbot","messagesForFunction","msg","errorMessage","index","ref","_c3","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/AIChatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { initializeApp, getApps, getApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';\r\nimport { getFirestore, collection, query, orderBy, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { getFunctions, httpsCallable } from 'firebase/functions';\r\n\r\n// Component to display a single message\r\nconst Message = ({ text, from }) => (\r\n    <div className={`flex my-2 ${from === 'user' ? 'justify-end' : 'justify-start'}`}>\r\n        <div className={`p-3 rounded-lg max-w-xs md:max-w-md lg:max-w-lg ${from === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`}>\r\n            <p>{text}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n// Component for the message input area\r\nconst MessageInput = ({ message, setMessage, handleSendMessage, isSending, isAuthenticated }) => {\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 bg-white border-t flex\">\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                className=\"flex-1 p-2 border rounded-lg focus:outline-none\"\r\n                placeholder={isAuthenticated ? \"Type your message here...\" : \"Connecting...\"}\r\n                disabled={isSending || !isAuthenticated}\r\n            />\r\n            <button\r\n                onClick={handleSendMessage}\r\n                className={`ml-2 p-2 rounded-lg text-white ${isSending || !isAuthenticated ? 'bg-gray-400' : 'bg-blue-500'}`}\r\n                disabled={isSending || !isAuthenticated}\r\n            >\r\n                {isSending ? 'Sending...' : 'Send'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main Chatbot component\r\nconst AIChatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [isSending, setIsSending] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [db, setDb] = useState(null);\r\n\r\n    // Initialize Firebase and set up authentication listener\r\n    useEffect(() => {\r\n        let app;\r\n        const firebaseConfig = window.api.getFirebaseConfig();\r\n        const authToken = window.api.getAuthToken();\r\n\r\n        if (!getApps().length) {\r\n            if (firebaseConfig && firebaseConfig.projectId) {\r\n                app = initializeApp(firebaseConfig);\r\n            } else {\r\n                console.error(\"Firebase config is not defined. Please ensure it's available globally.\");\r\n                return;\r\n            }\r\n        } else {\r\n            app = getApp();\r\n        }\r\n        \r\n        setDb(getFirestore(app));\r\n        const auth = getAuth(app);\r\n        \r\n        const unsubscribeAuth = onAuthStateChanged(auth, (user) => {\r\n            setIsAuthenticated(!!user);\r\n        });\r\n\r\n        if (authToken) {\r\n            signInWithCustomToken(auth, authToken).catch((error) => {\r\n                console.error(\"Error signing in with custom token:\", error);\r\n            });\r\n        } else {\r\n            signInAnonymously(auth).catch((error) => {\r\n                console.error(\"Error signing in anonymously:\", error);\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            unsubscribeAuth();\r\n        };\r\n    }, []);\r\n\r\n    // Listen for messages from Firestore\r\n    useEffect(() => {\r\n        const appId = window.api.getAppId();\r\n        if (db && appId) {\r\n            const q = query(collection(db, 'chats', appId, 'messages'), orderBy('createdAt'));\r\n            const unsubscribe = onSnapshot(q, (snapshot) => {\r\n                const newMessages = snapshot.docs.map(doc => doc.data());\r\n                setMessages(newMessages);\r\n            });\r\n            return () => unsubscribe();\r\n        }\r\n    }, [db]);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    const sendMessage = async () => {\r\n        if (!message.trim() || isSending || !isAuthenticated) return;\r\n\r\n        setIsSending(true);\r\n        const userMessage = { text: message, from: 'user', createdAt: serverTimestamp() };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        setMessage('');\r\n\r\n        try {\r\n            const appId = window.api.getAppId();\r\n            if (db && appId) {\r\n                await addDoc(collection(db, 'chats', appId, 'messages'), userMessage);\r\n            } else {\r\n                throw new Error(\"Firestore database or app ID is not initialized.\");\r\n            }\r\n            \r\n            const functions = getFunctions();\r\n            const callChatbot = httpsCallable(functions, 'chatbot');\r\n            \r\n            const messagesForFunction = [...messages, userMessage].map(msg => ({ text: msg.text, from: msg.from }));\r\n            await callChatbot({ messages: messagesForFunction });\r\n        } catch (error) {\r\n            console.error(\"Error sending message or calling chatbot function:\", error);\r\n            const errorMessage = { text: \"Sorry, I am unable to respond at this time.\", from: \"ai\", createdAt: serverTimestamp() };\r\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsSending(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col h-full bg-gray-100\">\r\n            <div className=\"flex-1 overflow-y-auto p-4\">\r\n                {messages.map((msg, index) => (\r\n                    <Message key={index} text={msg.text} from={msg.from} />\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <MessageInput\r\n                message={message}\r\n                setMessage={setMessage}\r\n                handleSendMessage={sendMessage}\r\n                isSending={isSending}\r\n                isAuthenticated={isAuthenticated}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AIChatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}