{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// This line tells ESLint to ignore the following global variables that are provided by the Canvas environment.\n/* global __app_id, __firebase_config, __initial_auth_token */\n\nimport { useState, useEffect, useRef } from 'react';\n// Import the core Firebase App functions\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { Send, Bot, Volume2, Image as ImageIcon, XCircle, Wand, Download } from 'lucide-react'; // Using Lucide for a modern icon, added Volume2 for TTS\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique key generation\n\n// This is the main App component for our chat application.\n// It handles all the UI, state management, and Firebase interactions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State to hold the chat messages. An array of objects.\n  const [messages, setMessages] = useState([]);\n  // State to hold the user's input in the text field.\n  const [input, setInput] = useState('');\n  // State to hold the Firebase database instance.\n  const [db, setDb] = useState(null);\n  // State to hold the current user's ID.\n  const [userId, setUserId] = useState(null);\n  // State to track if an AI response is being generated.\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\n  // State to track if the TTS audio is currently being generated or played.\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  // State to track if an image is being generated.\n  const [isImageGenerating, setIsImageGenerating] = useState(false);\n  // State to hold any authentication or initialization errors.\n  const [error, setError] = useState(null);\n  // State to store the uploaded image file and its preview URL.\n  const [imageFile, setImageFile] = useState(null);\n  const [imagePreviewUrl, setImagePreviewUrl] = useState(null);\n  // A ref to automatically scroll to the latest message.\n  const messagesEndRef = useRef(null);\n\n  // A fallback Firebase configuration in case the provided global variable is not available.\n  const fallbackFirebaseConfig = {\n    apiKey: \"AIzaSyDhJoNaFf0qgl4VTuUXj16ysJG1hycq-p8\",\n    authDomain: \"ai-chatbot-88602.firebaseapp.com\",\n    projectId: \"ai-chatbot-88602\",\n    storageBucket: \"ai-chatbot-88602.firebasestorage.app\",\n    messagingSenderId: \"167580287666\",\n    appId: \"1:167580287666:web:9e8313ae6e667e47d47fab\"\n  };\n\n  // useEffect to handle Firebase initialization and authentication.\n  // The empty dependency array `[]` ensures this runs only once on component mount.\n  useEffect(() => {\n    const initializeFirebase = async () => {\n      let firebaseConfig = fallbackFirebaseConfig;\n      try {\n        if (typeof __firebase_config !== 'undefined' && __firebase_config) {\n          firebaseConfig = JSON.parse(__firebase_config);\n        }\n      } catch (e) {\n        console.error(\"Failed to parse __firebase_config:\", e);\n        setError(\"Failed to parse Firebase configuration.\");\n        return;\n      }\n      if (!firebaseConfig || !firebaseConfig.projectId) {\n        const configError = \"Firebase configuration is missing. Please provide a valid config.\";\n        console.error(configError);\n        setError(configError);\n        return;\n      }\n      try {\n        // Initialize Firebase app only if it hasn't been initialized yet\n        let app;\n        if (!getApps().length) {\n          console.log(\"[FIREBASE] Initializing Firebase app...\");\n          app = initializeApp(firebaseConfig);\n        } else {\n          app = getApp();\n        }\n        const auth = getAuth(app);\n        const firestore = getFirestore(app);\n\n        // Use a flag to ensure sign-in logic runs only once\n        let isSigningIn = true;\n\n        // Set up the auth state listener first\n        onAuthStateChanged(auth, async user => {\n          if (user) {\n            console.log(\"[FIREBASE] User signed in with UID:\", user.uid);\n            setUserId(user.uid);\n            setDb(firestore);\n            setError(null);\n          } else {\n            // Only attempt to sign in if this is the initial check\n            if (isSigningIn) {\n              console.log(\"[FIREBASE] User is not signed in. Attempting sign-in...\");\n              try {\n                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n                if (initialAuthToken) {\n                  await signInWithCustomToken(auth, initialAuthToken);\n                } else {\n                  await signInAnonymously(auth);\n                }\n              } catch (e) {\n                console.error(\"[FIREBASE] Sign-in failed:\", e);\n                setError(`Error: Sign-in failed. Reason: ${e.message}`);\n              }\n              isSigningIn = false; // Prevent re-triggering sign-in logic\n            }\n          }\n        });\n      } catch (e) {\n        console.error(\"[FIREBASE] Initialization failed:\", e.message);\n        setError(`Error: Firebase initialization failed. Please check the console for more details. Reason: ${e.message}`);\n      }\n    };\n    initializeFirebase();\n  }, []);\n\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\n  // This effect will run whenever `db` or `userId` changes, ensuring Firestore is ready.\n  useEffect(() => {\n    // We only attach the listener if Firebase is fully initialized and authenticated.\n    if (db && userId) {\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n\n      // Create a query to get messages from the 'messages' collection.\n      const q = query(collection(db, path));\n      const unsubscribe = onSnapshot(q, querySnapshot => {\n        const fetchedMessages = [];\n        querySnapshot.forEach(doc => {\n          const data = doc.data();\n          fetchedMessages.push({\n            id: doc.id,\n            ...data,\n            type: data.type || 'text'\n          });\n        });\n        // Sort the messages by timestamp to ensure they are in the correct order.\n        fetchedMessages.sort((a, b) => {\n          var _a$timestamp, _b$timestamp;\n          return (((_a$timestamp = a.timestamp) === null || _a$timestamp === void 0 ? void 0 : _a$timestamp.toMillis()) || 0) - (((_b$timestamp = b.timestamp) === null || _b$timestamp === void 0 ? void 0 : _b$timestamp.toMillis()) || 0);\n        });\n        setMessages(fetchedMessages);\n      }, firestoreError => {\n        console.error(\"Error fetching messages:\", firestoreError);\n        setError(\"Failed to fetch messages. Check your Firestore rules and connection.\");\n      });\n      return () => unsubscribe();\n    }\n  }, [db, userId]);\n\n  // Use a separate useEffect to handle AI responses to user messages\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    // Check if the last message is from the user and an AI response is not already in progress.\n    if (db && lastMessage && lastMessage.userId === userId && lastMessage.type !== 'image' && !isAIGenerating) {\n      const getAIResponse = async () => {\n        setIsAIGenerating(true);\n        console.log(\"[AI] User sent a message. Generating AI response...\");\n        try {\n          // Prepare chat history for the API call.\n          const chatHistory = messages.map(msg => {\n            const parts = [{\n              text: msg.text\n            }];\n            if (msg.image) {\n              parts.push({\n                inlineData: {\n                  mimeType: msg.image.mimeType,\n                  data: msg.image.data\n                }\n              });\n            }\n            return {\n              role: msg.userId === userId ? 'user' : 'model',\n              parts: parts\n            };\n          });\n          const payload = {\n            contents: chatHistory\n          };\n          const apiKey = \"\"; // API key is automatically provided by the Canvas environment\n          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n          let response;\n          let retryCount = 0;\n          const maxRetries = 5;\n          const initialDelay = 1000;\n          while (retryCount < maxRetries) {\n            try {\n              response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n              });\n              if (response.status !== 429) {\n                break;\n              }\n              console.warn(`[API] Rate limit hit. Retrying in ${initialDelay * Math.pow(2, retryCount)}ms...`);\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\n              retryCount++;\n            } catch (fetchError) {\n              console.error(`[API] Fetch failed. Retrying...`, fetchError);\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\n              retryCount++;\n            }\n          }\n          if (!response || !response.ok) {\n            var _response;\n            throw new Error(`API error: ${((_response = response) === null || _response === void 0 ? void 0 : _response.statusText) || 'Unknown error'}`);\n          }\n          const result = await response.json();\n          let responseText = \"Sorry, I couldn't generate a response.\";\n          if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n            responseText = result.candidates[0].content.parts[0].text;\n            console.log(\"[AI] Generated AI response successfully.\");\n          }\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\n          await addDoc(collection(db, path), {\n            text: responseText,\n            userId: 'bot',\n            type: 'text',\n            timestamp: serverTimestamp()\n          });\n        } catch (e) {\n          console.error(\"[AI ERROR] Error getting AI response:\", e);\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\n          await addDoc(collection(db, path), {\n            text: `Sorry, I am having trouble processing that request. Error: ${e.message}`,\n            userId: 'bot',\n            type: 'text',\n            timestamp: serverTimestamp()\n          });\n        } finally {\n          setIsAIGenerating(false);\n        }\n      };\n      getAIResponse();\n    }\n  }, [messages, db, isAIGenerating, userId]);\n\n  // Helper functions for TTS audio conversion\n  const base64ToArrayBuffer = base64 => {\n    const binaryString = atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  const pcmToWav = (pcmData, sampleRate) => {\n    const buffer = new ArrayBuffer(44 + pcmData.byteLength);\n    const view = new DataView(buffer);\n\n    // Write WAV file header\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + pcmData.byteLength, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, 1, true); // Mono\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * 2, true); // Byte rate\n    view.setUint16(32, 2, true); // Block align\n    view.setUint16(34, 16, true); // Bits per sample\n    writeString(view, 36, 'data');\n    view.setUint32(40, pcmData.byteLength, true);\n\n    // Write PCM data\n    const pcmView = new Int16Array(pcmData);\n    let offset = 44;\n    for (let i = 0; i < pcmView.length; i++, offset += 2) {\n      view.setInt16(offset, pcmView[i], true);\n    }\n    return new Blob([view], {\n      type: 'audio/wav'\n    });\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n\n  // Function to handle the text-to-speech functionality\n  const handleTextToSpeech = async text => {\n    setIsSpeaking(true);\n    console.log(\"[TTS] Generating text-to-speech for message:\", text);\n    try {\n      var _result$candidates, _result$candidates$, _result$candidates$$c, _result$candidates$$c2, _part$inlineData, _part$inlineData2;\n      const payload = {\n        contents: [{\n          parts: [{\n            text: text\n          }]\n        }],\n        generationConfig: {\n          responseModalities: [\"AUDIO\"],\n          speechConfig: {\n            voiceConfig: {\n              prebuiltVoiceConfig: {\n                voiceName: \"Kore\"\n              } // Using the Kore voice\n            }\n          }\n        }\n      };\n      const apiKey = \"\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      const part = result === null || result === void 0 ? void 0 : (_result$candidates = result.candidates) === null || _result$candidates === void 0 ? void 0 : (_result$candidates$ = _result$candidates[0]) === null || _result$candidates$ === void 0 ? void 0 : (_result$candidates$$c = _result$candidates$.content) === null || _result$candidates$$c === void 0 ? void 0 : (_result$candidates$$c2 = _result$candidates$$c.parts) === null || _result$candidates$$c2 === void 0 ? void 0 : _result$candidates$$c2[0];\n      const audioData = part === null || part === void 0 ? void 0 : (_part$inlineData = part.inlineData) === null || _part$inlineData === void 0 ? void 0 : _part$inlineData.data;\n      const mimeType = part === null || part === void 0 ? void 0 : (_part$inlineData2 = part.inlineData) === null || _part$inlineData2 === void 0 ? void 0 : _part$inlineData2.mimeType;\n      if (audioData && mimeType && mimeType.startsWith(\"audio/\")) {\n        // The API returns 'audio/L16;rate=24000' for example\n        const sampleRate = parseInt(mimeType.match(/rate=(\\d+)/)[1], 10);\n        const pcmData = base64ToArrayBuffer(audioData);\n        const pcm16 = new Int16Array(pcmData);\n        const wavBlob = pcmToWav(pcm16, sampleRate);\n        const audioUrl = URL.createObjectURL(wavBlob);\n        const audio = new Audio(audioUrl);\n        audio.onended = () => {\n          setIsSpeaking(false);\n          URL.revokeObjectURL(audioUrl);\n        };\n        audio.play();\n      } else {\n        console.error(\"[TTS Error] Invalid audio response from API.\");\n        setIsSpeaking(false);\n      }\n    } catch (e) {\n      console.error(\"[TTS Error] Error generating speech:\", e);\n      setIsSpeaking(false);\n    }\n  };\n\n  // Function to handle sending a new message.\n  const handleSendMessage = async () => {\n    if (input.trim() === '' && !imageFile || !db || !userId) {\n      console.log(\"Cannot send empty message or Firebase not ready.\");\n      return;\n    }\n    try {\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n      const messageData = {\n        text: input,\n        userId: userId,\n        type: 'text',\n        timestamp: serverTimestamp()\n      };\n      if (imageFile) {\n        const reader = new FileReader();\n        reader.onloadend = async () => {\n          const base64Data = reader.result.split(',')[1];\n          messageData.image = {\n            data: base64Data,\n            mimeType: imageFile.type\n          };\n          await addDoc(collection(db, path), messageData);\n          setInput('');\n          setImageFile(null);\n          setImagePreviewUrl(null);\n        };\n        reader.readAsDataURL(imageFile);\n      } else {\n        await addDoc(collection(db, path), messageData);\n        setInput('');\n      }\n    } catch (error) {\n      console.error(\"Error adding document: \", error);\n      setError(\"Failed to send message. Please try again.\");\n    }\n  };\n\n  // Function to handle image file selection\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setImageFile(file);\n      setImagePreviewUrl(URL.createObjectURL(file));\n    }\n  };\n\n  // Function to remove the selected image\n  const handleRemoveImage = () => {\n    setImageFile(null);\n    setImagePreviewUrl(null);\n  };\n\n  // Function to handle image generation using the Gemini API\n  const handleGenerateImage = async () => {\n    if (input.trim() === '' || !db || !userId) {\n      console.log(\"Cannot generate image with an empty prompt.\");\n      return;\n    }\n    setIsImageGenerating(true);\n    try {\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n\n      // Add a user message to indicate the image generation request\n      await addDoc(collection(db, path), {\n        text: `Generate an image for: \"${input}\"`,\n        userId: userId,\n        type: 'text',\n        timestamp: serverTimestamp()\n      });\n      const payload = {\n        instances: {\n          prompt: input\n        },\n        parameters: {\n          \"sampleCount\": 1\n        }\n      };\n      const apiKey = \"\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {\n        const base64Data = result.predictions[0].bytesBase64Encoded;\n        const imageUrl = `data:image/png;base64,${base64Data}`;\n\n        // Add the generated image to the chat messages\n        await addDoc(collection(db, path), {\n          text: `Here is the image you requested for \"${input}\".`,\n          imageUrl: imageUrl,\n          userId: 'bot',\n          type: 'image',\n          timestamp: serverTimestamp()\n        });\n        console.log(\"[AI] Generated image successfully.\");\n      } else {\n        console.error(\"[AI ERROR] No image prediction found in the API response.\");\n        await addDoc(collection(db, path), {\n          text: `Sorry, I couldn't generate an image for that prompt.`,\n          userId: 'bot',\n          type: 'text',\n          timestamp: serverTimestamp()\n        });\n      }\n    } catch (e) {\n      console.error(\"[AI ERROR] Error generating image:\", e);\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n      await addDoc(collection(db, path), {\n        text: `Sorry, I am having trouble generating that image. Error: ${e.message}`,\n        userId: 'bot',\n        type: 'text',\n        timestamp: serverTimestamp()\n      });\n    } finally {\n      setIsImageGenerating(false);\n      setInput('');\n    }\n  };\n\n  // Function to handle key presses in the input field.\n  const handleKeyDown = event => {\n    if (event.key === 'Enter' && input.trim() !== '' && !isAIGenerating && !isSpeaking) {\n      handleSendMessage();\n    }\n  };\n\n  // A useEffect to scroll the chat window to the bottom whenever new messages arrive.\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // CSS for the dot-flashing loading animation. This is in a template literal\n  // because we don't have an external CSS file for React immersives.\n  const dotFlashingCss = `\n    .dot-flashing {\n      position: relative;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite linear alternate;\n      animation-delay: .5s;\n    }\n    .dot-flashing::before, .dot-flashing::after {\n      content: '';\n      display: inline-block;\n      position: absolute;\n      top: 0;\n    }\n    .dot-flashing::before {\n      left: -10px;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite alternate;\n    }\n    .dot-flashing::after {\n      left: 10px;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite alternate;\n      animation-delay: 1s;\n    }\n    @keyframes dotFlashing {\n      0% { background-color: #efefef; }\n      50%, 100% { background-color: #9e9e9e; }\n    }\n  `;\n  return (\n    /*#__PURE__*/\n    // Main container with a dark background and full viewport height/width.\n    // It uses flexbox to center the chat container both horizontally and vertically.\n    _jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: dotFlashingCss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full max-w-sm md:max-w-xl lg:max-w-2xl bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\",\n          children: \"AI Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 p-4 overflow-y-auto space-y-4\",\n          children: [!db && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-slate-400 mt-10\",\n            children: \"Initializing Firebase...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-red-400 mt-10 p-4 bg-red-900 rounded-lg\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this), db && !error && messages.map((message, index) =>\n          /*#__PURE__*/\n          // A message bubble. We use different styles for the current user's messages and the bot's.\n          _jsxDEV(\"div\", {\n            className: `flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `max-w-[70%] p-3 rounded-2xl shadow-md ${message.userId === userId ? 'bg-blue-600 text-white' // User's message style\n              : 'bg-slate-700 text-slate-100' // Bot's message style\n              } ${message.userId === userId ? 'rounded-br-none' // Make the bottom-right corner sharp for user messages\n              : 'rounded-bl-none' // Make the bottom-left corner sharp for bot messages\n              }`,\n              children: [message.userId === 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center gap-2 mb-2\",\n                children: [/*#__PURE__*/_jsxDEV(Bot, {\n                  size: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 581,\n                  columnNumber: 21\n                }, this), message.type === 'text' && /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleTextToSpeech(message.text),\n                  className: \"text-white text-xs px-2 py-1 bg-slate-600 rounded-full hover:bg-slate-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n                  disabled: isSpeaking || isAIGenerating || isImageGenerating,\n                  children: [/*#__PURE__*/_jsxDEV(Volume2, {\n                    size: 12,\n                    className: \"inline-block mr-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 588,\n                    columnNumber: 25\n                  }, this), \"Speak \\u2728\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 19\n              }, this), message.type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm break-words inline-block\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 596,\n                columnNumber: 19\n              }, this), message.type === 'image' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex flex-col items-start gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: message.imageUrl,\n                  alt: \"Generated\",\n                  className: \"rounded-lg max-w-full h-auto\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 600,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: message.imageUrl,\n                  download: `gemini-image-${index}.png`,\n                  className: \"flex items-center gap-1 text-xs text-blue-300 hover:text-blue-200 transition-colors\",\n                  children: [/*#__PURE__*/_jsxDEV(Download, {\n                    size: 12\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 602,\n                    columnNumber: 23\n                  }, this), \"Download Image\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 19\n              }, this), message.userId === userId && message.image && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-2\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:${message.image.mimeType};base64,${message.image.data}`,\n                  alt: \"Uploaded\",\n                  className: \"rounded-lg max-w-full h-auto\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 19\n              }, this), message.userId !== 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-slate-400 mt-1\",\n                children: [\"User: \", message.userId.substring(0, 8), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 15\n            }, this)\n          }, message.id || uuidv4(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this)), (isAIGenerating || isImageGenerating) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start justify-start\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 rounded-2xl bg-slate-700 text-slate-100 max-w-[70%] rounded-bl-none\",\n              children: [/*#__PURE__*/_jsxDEV(Bot, {\n                size: 16,\n                className: \"inline-block mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dot-flashing inline-block align-middle ml-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl\",\n          children: [imagePreviewUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative mb-2 p-2 border border-slate-600 rounded-lg bg-slate-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: imagePreviewUrl,\n              alt: \"Preview\",\n              className: \"max-h-24 rounded-md\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleRemoveImage,\n              className: \"absolute top-1 right-1 p-1 bg-red-500 rounded-full text-white hover:bg-red-600 transition-colors\",\n              children: /*#__PURE__*/_jsxDEV(XCircle, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\",\n              placeholder: \"Type your message...\",\n              value: input,\n              onChange: e => setInput(e.target.value),\n              onKeyDown: handleKeyDown\n              // Disable input if not ready or if an error occurred\n              ,\n              disabled: !db || isAIGenerating || isSpeaking || isImageGenerating || !!error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"p-3 bg-purple-600 text-white rounded-full shadow-lg hover:bg-purple-700 transition-all cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \"image/*\",\n                onChange: handleImageUpload,\n                className: \"hidden\",\n                disabled: !db || isAIGenerating || isSpeaking || isImageGenerating || !!error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(ImageIcon, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleGenerateImage,\n              className: \"p-3 bg-amber-600 text-white rounded-full shadow-lg hover:bg-amber-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\",\n              disabled: !db || input.trim() === '' || isAIGenerating || isSpeaking || isImageGenerating || !!error,\n              children: /*#__PURE__*/_jsxDEV(Wand, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              className: \"p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\",\n              disabled: !db || input.trim() === '' && !imageFile || isAIGenerating || isSpeaking || isImageGenerating || !!error,\n              children: /*#__PURE__*/_jsxDEV(Send, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"R8+XJgi8gBihHxepNHYk0T6tPY4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","initializeApp","getApps","getApp","getAuth","signInWithCustomToken","signInAnonymously","onAuthStateChanged","getFirestore","collection","query","onSnapshot","addDoc","serverTimestamp","Send","Bot","Volume2","Image","ImageIcon","XCircle","Wand","Download","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","db","setDb","userId","setUserId","isAIGenerating","setIsAIGenerating","isSpeaking","setIsSpeaking","isImageGenerating","setIsImageGenerating","error","setError","imageFile","setImageFile","imagePreviewUrl","setImagePreviewUrl","messagesEndRef","fallbackFirebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeFirebase","firebaseConfig","__firebase_config","JSON","parse","e","console","configError","app","length","log","auth","firestore","isSigningIn","user","uid","initialAuthToken","__initial_auth_token","message","currentAppId","__app_id","path","q","unsubscribe","querySnapshot","fetchedMessages","forEach","doc","data","push","id","type","sort","a","b","_a$timestamp","_b$timestamp","timestamp","toMillis","firestoreError","lastMessage","getAIResponse","chatHistory","map","msg","parts","text","image","inlineData","mimeType","role","payload","contents","apiUrl","response","retryCount","maxRetries","initialDelay","fetch","method","headers","body","stringify","status","warn","Math","pow","Promise","resolve","setTimeout","fetchError","ok","_response","Error","statusText","result","json","responseText","candidates","content","base64ToArrayBuffer","base64","binaryString","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","pcmToWav","pcmData","sampleRate","ArrayBuffer","byteLength","view","DataView","writeString","setUint32","setUint16","pcmView","Int16Array","offset","setInt16","Blob","string","setUint8","handleTextToSpeech","_result$candidates","_result$candidates$","_result$candidates$$c","_result$candidates$$c2","_part$inlineData","_part$inlineData2","generationConfig","responseModalities","speechConfig","voiceConfig","prebuiltVoiceConfig","voiceName","part","audioData","startsWith","parseInt","match","pcm16","wavBlob","audioUrl","URL","createObjectURL","audio","Audio","onended","revokeObjectURL","play","handleSendMessage","trim","messageData","reader","FileReader","onloadend","base64Data","split","readAsDataURL","handleImageUpload","event","file","target","files","handleRemoveImage","handleGenerateImage","instances","prompt","parameters","predictions","bytesBase64Encoded","imageUrl","handleKeyDown","key","_messagesEndRef$curre","current","scrollIntoView","behavior","dotFlashingCss","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","size","onClick","disabled","src","alt","href","download","substring","ref","placeholder","value","onChange","onKeyDown","accept","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/App.js"],"sourcesContent":["// This line tells ESLint to ignore the following global variables that are provided by the Canvas environment.\r\n/* global __app_id, __firebase_config, __initial_auth_token */\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\n// Import the core Firebase App functions\r\nimport { initializeApp, getApps, getApp } from 'firebase/app';\r\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { Send, Bot, Volume2, Image as ImageIcon, XCircle, Wand, Download } from 'lucide-react'; // Using Lucide for a modern icon, added Volume2 for TTS\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique key generation\r\n\r\n// This is the main App component for our chat application.\r\n// It handles all the UI, state management, and Firebase interactions.\r\nexport default function App() {\r\n  // State to hold the chat messages. An array of objects.\r\n  const [messages, setMessages] = useState([]);\r\n  // State to hold the user's input in the text field.\r\n  const [input, setInput] = useState('');\r\n  // State to hold the Firebase database instance.\r\n  const [db, setDb] = useState(null);\r\n  // State to hold the current user's ID.\r\n  const [userId, setUserId] = useState(null);\r\n  // State to track if an AI response is being generated.\r\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\r\n  // State to track if the TTS audio is currently being generated or played.\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  // State to track if an image is being generated.\r\n  const [isImageGenerating, setIsImageGenerating] = useState(false);\r\n  // State to hold any authentication or initialization errors.\r\n  const [error, setError] = useState(null);\r\n  // State to store the uploaded image file and its preview URL.\r\n  const [imageFile, setImageFile] = useState(null);\r\n  const [imagePreviewUrl, setImagePreviewUrl] = useState(null);\r\n  // A ref to automatically scroll to the latest message.\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // A fallback Firebase configuration in case the provided global variable is not available.\r\n  const fallbackFirebaseConfig = {\r\n    apiKey: \"AIzaSyDhJoNaFf0qgl4VTuUXj16ysJG1hycq-p8\",\r\n    authDomain: \"ai-chatbot-88602.firebaseapp.com\",\r\n    projectId: \"ai-chatbot-88602\",\r\n    storageBucket: \"ai-chatbot-88602.firebasestorage.app\",\r\n    messagingSenderId: \"167580287666\",\r\n    appId: \"1:167580287666:web:9e8313ae6e667e47d47fab\"\r\n  };\r\n\r\n  // useEffect to handle Firebase initialization and authentication.\r\n  // The empty dependency array `[]` ensures this runs only once on component mount.\r\n  useEffect(() => {\r\n    const initializeFirebase = async () => {\r\n      let firebaseConfig = fallbackFirebaseConfig;\r\n      try {\r\n        if (typeof __firebase_config !== 'undefined' && __firebase_config) {\r\n          firebaseConfig = JSON.parse(__firebase_config);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Failed to parse __firebase_config:\", e);\r\n        setError(\"Failed to parse Firebase configuration.\");\r\n        return;\r\n      }\r\n  \r\n      if (!firebaseConfig || !firebaseConfig.projectId) {\r\n        const configError = \"Firebase configuration is missing. Please provide a valid config.\";\r\n        console.error(configError);\r\n        setError(configError);\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        // Initialize Firebase app only if it hasn't been initialized yet\r\n        let app;\r\n        if (!getApps().length) {\r\n          console.log(\"[FIREBASE] Initializing Firebase app...\");\r\n          app = initializeApp(firebaseConfig);\r\n        } else {\r\n          app = getApp();\r\n        }\r\n        \r\n        const auth = getAuth(app);\r\n        const firestore = getFirestore(app);\r\n        \r\n        // Use a flag to ensure sign-in logic runs only once\r\n        let isSigningIn = true;\r\n\r\n        // Set up the auth state listener first\r\n        onAuthStateChanged(auth, async (user) => {\r\n          if (user) {\r\n            console.log(\"[FIREBASE] User signed in with UID:\", user.uid);\r\n            setUserId(user.uid);\r\n            setDb(firestore);\r\n            setError(null);\r\n          } else {\r\n            // Only attempt to sign in if this is the initial check\r\n            if (isSigningIn) {\r\n              console.log(\"[FIREBASE] User is not signed in. Attempting sign-in...\");\r\n              try {\r\n                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n                if (initialAuthToken) {\r\n                  await signInWithCustomToken(auth, initialAuthToken);\r\n                } else {\r\n                  await signInAnonymously(auth);\r\n                }\r\n              } catch (e) {\r\n                console.error(\"[FIREBASE] Sign-in failed:\", e);\r\n                setError(`Error: Sign-in failed. Reason: ${e.message}`);\r\n              }\r\n              isSigningIn = false; // Prevent re-triggering sign-in logic\r\n            }\r\n          }\r\n        });\r\n\r\n      } catch (e) {\r\n        console.error(\"[FIREBASE] Initialization failed:\", e.message);\r\n        setError(`Error: Firebase initialization failed. Please check the console for more details. Reason: ${e.message}`);\r\n      }\r\n    };\r\n  \r\n    initializeFirebase();\r\n  }, []);\r\n\r\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\r\n  // This effect will run whenever `db` or `userId` changes, ensuring Firestore is ready.\r\n  useEffect(() => {\r\n    // We only attach the listener if Firebase is fully initialized and authenticated.\r\n    if (db && userId) {\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      \r\n      // Create a query to get messages from the 'messages' collection.\r\n      const q = query(collection(db, path));\r\n      \r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n        const fetchedMessages = [];\r\n        querySnapshot.forEach((doc) => {\r\n          const data = doc.data();\r\n          fetchedMessages.push({ id: doc.id, ...data, type: data.type || 'text' });\r\n        });\r\n        // Sort the messages by timestamp to ensure they are in the correct order.\r\n        fetchedMessages.sort((a, b) => (a.timestamp?.toMillis() || 0) - (b.timestamp?.toMillis() || 0));\r\n        setMessages(fetchedMessages);\r\n      }, (firestoreError) => {\r\n        console.error(\"Error fetching messages:\", firestoreError);\r\n        setError(\"Failed to fetch messages. Check your Firestore rules and connection.\");\r\n      });\r\n      \r\n      return () => unsubscribe();\r\n    }\r\n  }, [db, userId]);\r\n\r\n  // Use a separate useEffect to handle AI responses to user messages\r\n  useEffect(() => {\r\n    const lastMessage = messages[messages.length - 1];\r\n    // Check if the last message is from the user and an AI response is not already in progress.\r\n    if (db && lastMessage && lastMessage.userId === userId && lastMessage.type !== 'image' && !isAIGenerating) {\r\n      const getAIResponse = async () => {\r\n        setIsAIGenerating(true);\r\n        console.log(\"[AI] User sent a message. Generating AI response...\");\r\n\r\n        try {\r\n          // Prepare chat history for the API call.\r\n          const chatHistory = messages.map(msg => {\r\n            const parts = [{ text: msg.text }];\r\n            if (msg.image) {\r\n              parts.push({\r\n                inlineData: {\r\n                  mimeType: msg.image.mimeType,\r\n                  data: msg.image.data\r\n                }\r\n              });\r\n            }\r\n            return {\r\n              role: msg.userId === userId ? 'user' : 'model',\r\n              parts: parts\r\n            };\r\n          });\r\n          \r\n          const payload = { contents: chatHistory };\r\n          const apiKey = \"\"; // API key is automatically provided by the Canvas environment\r\n          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n          \r\n          let response;\r\n          let retryCount = 0;\r\n          const maxRetries = 5;\r\n          const initialDelay = 1000;\r\n\r\n          while (retryCount < maxRetries) {\r\n            try {\r\n              response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n              });\r\n              if (response.status !== 429) {\r\n                break;\r\n              }\r\n              console.warn(`[API] Rate limit hit. Retrying in ${initialDelay * Math.pow(2, retryCount)}ms...`);\r\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\r\n              retryCount++;\r\n            } catch (fetchError) {\r\n              console.error(`[API] Fetch failed. Retrying...`, fetchError);\r\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\r\n              retryCount++;\r\n            }\r\n          }\r\n          \r\n          if (!response || !response.ok) {\r\n            throw new Error(`API error: ${response?.statusText || 'Unknown error'}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          let responseText = \"Sorry, I couldn't generate a response.\";\r\n          if (result.candidates && result.candidates.length > 0 &&\r\n              result.candidates[0].content && result.candidates[0].content.parts &&\r\n              result.candidates[0].content.parts.length > 0) {\r\n            responseText = result.candidates[0].content.parts[0].text;\r\n            console.log(\"[AI] Generated AI response successfully.\");\r\n          }\r\n\r\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n          await addDoc(collection(db, path), {\r\n            text: responseText,\r\n            userId: 'bot',\r\n            type: 'text',\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        } catch (e) {\r\n          console.error(\"[AI ERROR] Error getting AI response:\", e);\r\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n          await addDoc(collection(db, path), {\r\n            text: `Sorry, I am having trouble processing that request. Error: ${e.message}`,\r\n            userId: 'bot',\r\n            type: 'text',\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        } finally {\r\n          setIsAIGenerating(false);\r\n        }\r\n      };\r\n\r\n      getAIResponse();\r\n    }\r\n  }, [messages, db, isAIGenerating, userId]);\r\n\r\n  // Helper functions for TTS audio conversion\r\n  const base64ToArrayBuffer = (base64) => {\r\n    const binaryString = atob(base64);\r\n    const len = binaryString.length;\r\n    const bytes = new Uint8Array(len);\r\n    for (let i = 0; i < len; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  };\r\n\r\n  const pcmToWav = (pcmData, sampleRate) => {\r\n    const buffer = new ArrayBuffer(44 + pcmData.byteLength);\r\n    const view = new DataView(buffer);\r\n\r\n    // Write WAV file header\r\n    writeString(view, 0, 'RIFF');\r\n    view.setUint32(4, 36 + pcmData.byteLength, true);\r\n    writeString(view, 8, 'WAVE');\r\n    writeString(view, 12, 'fmt ');\r\n    view.setUint32(16, 16, true);\r\n    view.setUint16(20, 1, true);\r\n    view.setUint16(22, 1, true); // Mono\r\n    view.setUint32(24, sampleRate, true);\r\n    view.setUint32(28, sampleRate * 2, true); // Byte rate\r\n    view.setUint16(32, 2, true); // Block align\r\n    view.setUint16(34, 16, true); // Bits per sample\r\n    writeString(view, 36, 'data');\r\n    view.setUint32(40, pcmData.byteLength, true);\r\n\r\n    // Write PCM data\r\n    const pcmView = new Int16Array(pcmData);\r\n    let offset = 44;\r\n    for (let i = 0; i < pcmView.length; i++, offset += 2) {\r\n      view.setInt16(offset, pcmView[i], true);\r\n    }\r\n    return new Blob([view], { type: 'audio/wav' });\r\n  };\r\n\r\n  const writeString = (view, offset, string) => {\r\n    for (let i = 0; i < string.length; i++) {\r\n      view.setUint8(offset + i, string.charCodeAt(i));\r\n    }\r\n  };\r\n\r\n  // Function to handle the text-to-speech functionality\r\n  const handleTextToSpeech = async (text) => {\r\n    setIsSpeaking(true);\r\n    console.log(\"[TTS] Generating text-to-speech for message:\", text);\r\n    try {\r\n      const payload = {\r\n        contents: [{ parts: [{ text: text }] }],\r\n        generationConfig: {\r\n          responseModalities: [\"AUDIO\"],\r\n          speechConfig: {\r\n            voiceConfig: {\r\n              prebuiltVoiceConfig: { voiceName: \"Kore\" } // Using the Kore voice\r\n            }\r\n          }\r\n        }\r\n      };\r\n      const apiKey = \"\";\r\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;\r\n\r\n      const response = await fetch(apiUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload)\r\n      });\r\n      const result = await response.json();\r\n      const part = result?.candidates?.[0]?.content?.parts?.[0];\r\n      const audioData = part?.inlineData?.data;\r\n      const mimeType = part?.inlineData?.mimeType;\r\n\r\n      if (audioData && mimeType && mimeType.startsWith(\"audio/\")) {\r\n        // The API returns 'audio/L16;rate=24000' for example\r\n        const sampleRate = parseInt(mimeType.match(/rate=(\\d+)/)[1], 10);\r\n        const pcmData = base64ToArrayBuffer(audioData);\r\n        const pcm16 = new Int16Array(pcmData);\r\n        const wavBlob = pcmToWav(pcm16, sampleRate);\r\n        const audioUrl = URL.createObjectURL(wavBlob);\r\n        const audio = new Audio(audioUrl);\r\n        \r\n        audio.onended = () => {\r\n          setIsSpeaking(false);\r\n          URL.revokeObjectURL(audioUrl);\r\n        };\r\n        audio.play();\r\n      } else {\r\n        console.error(\"[TTS Error] Invalid audio response from API.\");\r\n        setIsSpeaking(false);\r\n      }\r\n    } catch (e) {\r\n      console.error(\"[TTS Error] Error generating speech:\", e);\r\n      setIsSpeaking(false);\r\n    }\r\n  };\r\n\r\n  // Function to handle sending a new message.\r\n  const handleSendMessage = async () => {\r\n    if ((input.trim() === '' && !imageFile) || !db || !userId) {\r\n      console.log(\"Cannot send empty message or Firebase not ready.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n\r\n      const messageData = {\r\n        text: input,\r\n        userId: userId,\r\n        type: 'text',\r\n        timestamp: serverTimestamp(),\r\n      };\r\n\r\n      if (imageFile) {\r\n        const reader = new FileReader();\r\n        reader.onloadend = async () => {\r\n          const base64Data = reader.result.split(',')[1];\r\n          messageData.image = {\r\n            data: base64Data,\r\n            mimeType: imageFile.type\r\n          };\r\n          await addDoc(collection(db, path), messageData);\r\n          setInput('');\r\n          setImageFile(null);\r\n          setImagePreviewUrl(null);\r\n        };\r\n        reader.readAsDataURL(imageFile);\r\n      } else {\r\n        await addDoc(collection(db, path), messageData);\r\n        setInput('');\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error adding document: \", error);\r\n      setError(\"Failed to send message. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Function to handle image file selection\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      setImageFile(file);\r\n      setImagePreviewUrl(URL.createObjectURL(file));\r\n    }\r\n  };\r\n\r\n  // Function to remove the selected image\r\n  const handleRemoveImage = () => {\r\n    setImageFile(null);\r\n    setImagePreviewUrl(null);\r\n  };\r\n  \r\n  // Function to handle image generation using the Gemini API\r\n  const handleGenerateImage = async () => {\r\n    if (input.trim() === '' || !db || !userId) {\r\n      console.log(\"Cannot generate image with an empty prompt.\");\r\n      return;\r\n    }\r\n  \r\n    setIsImageGenerating(true);\r\n    try {\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      \r\n      // Add a user message to indicate the image generation request\r\n      await addDoc(collection(db, path), {\r\n        text: `Generate an image for: \"${input}\"`,\r\n        userId: userId,\r\n        type: 'text',\r\n        timestamp: serverTimestamp(),\r\n      });\r\n      \r\n      const payload = {\r\n        instances: { prompt: input },\r\n        parameters: { \"sampleCount\": 1 }\r\n      };\r\n      \r\n      const apiKey = \"\";\r\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;\r\n      \r\n      const response = await fetch(apiUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload)\r\n      });\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {\r\n        const base64Data = result.predictions[0].bytesBase64Encoded;\r\n        const imageUrl = `data:image/png;base64,${base64Data}`;\r\n        \r\n        // Add the generated image to the chat messages\r\n        await addDoc(collection(db, path), {\r\n          text: `Here is the image you requested for \"${input}\".`,\r\n          imageUrl: imageUrl,\r\n          userId: 'bot',\r\n          type: 'image',\r\n          timestamp: serverTimestamp(),\r\n        });\r\n        \r\n        console.log(\"[AI] Generated image successfully.\");\r\n      } else {\r\n        console.error(\"[AI ERROR] No image prediction found in the API response.\");\r\n        await addDoc(collection(db, path), {\r\n          text: `Sorry, I couldn't generate an image for that prompt.`,\r\n          userId: 'bot',\r\n          type: 'text',\r\n          timestamp: serverTimestamp(),\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.error(\"[AI ERROR] Error generating image:\", e);\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      await addDoc(collection(db, path), {\r\n        text: `Sorry, I am having trouble generating that image. Error: ${e.message}`,\r\n        userId: 'bot',\r\n        type: 'text',\r\n        timestamp: serverTimestamp(),\r\n      });\r\n    } finally {\r\n      setIsImageGenerating(false);\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n\r\n  // Function to handle key presses in the input field.\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === 'Enter' && input.trim() !== '' && !isAIGenerating && !isSpeaking) {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // A useEffect to scroll the chat window to the bottom whenever new messages arrive.\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // CSS for the dot-flashing loading animation. This is in a template literal\r\n  // because we don't have an external CSS file for React immersives.\r\n  const dotFlashingCss = `\r\n    .dot-flashing {\r\n      position: relative;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite linear alternate;\r\n      animation-delay: .5s;\r\n    }\r\n    .dot-flashing::before, .dot-flashing::after {\r\n      content: '';\r\n      display: inline-block;\r\n      position: absolute;\r\n      top: 0;\r\n    }\r\n    .dot-flashing::before {\r\n      left: -10px;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite alternate;\r\n    }\r\n    .dot-flashing::after {\r\n      left: 10px;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite alternate;\r\n      animation-delay: 1s;\r\n    }\r\n    @keyframes dotFlashing {\r\n      0% { background-color: #efefef; }\r\n      50%, 100% { background-color: #9e9e9e; }\r\n    }\r\n  `;\r\n\r\n  return (\r\n    // Main container with a dark background and full viewport height/width.\r\n    // It uses flexbox to center the chat container both horizontally and vertically.\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\">\r\n      {/* Inject the custom CSS for the loading animation */}\r\n      <style>{dotFlashingCss}</style>\r\n\r\n      {/* The main chat container. It's a responsive box with a dark background. */}\r\n      <div className=\"flex flex-col w-full max-w-sm md:max-w-xl lg:max-w-2xl bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\">\r\n        \r\n        {/* Header section for the chat window. */}\r\n        <div className=\"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\">\r\n          AI Chatbot\r\n        </div>\r\n\r\n        {/* Display area for the messages. It's a scrollable container. */}\r\n        <div className=\"flex-1 p-4 overflow-y-auto space-y-4\">\r\n          {/* Display loading, error, or messages */}\r\n          {!db && !error && (\r\n            <div className=\"text-center text-slate-400 mt-10\">\r\n              Initializing Firebase...\r\n            </div>\r\n          )}\r\n          {error && (\r\n            <div className=\"text-center text-red-400 mt-10 p-4 bg-red-900 rounded-lg\">\r\n              Error: {error}\r\n            </div>\r\n          )}\r\n          {db && !error && messages.map((message, index) => (\r\n            // A message bubble. We use different styles for the current user's messages and the bot's.\r\n            <div\r\n              key={message.id || uuidv4()}\r\n              className={`flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`}\r\n            >\r\n              <div\r\n                className={`max-w-[70%] p-3 rounded-2xl shadow-md ${\r\n                  message.userId === userId\r\n                    ? 'bg-blue-600 text-white' // User's message style\r\n                    : 'bg-slate-700 text-slate-100' // Bot's message style\r\n                } ${\r\n                  message.userId === userId\r\n                    ? 'rounded-br-none' // Make the bottom-right corner sharp for user messages\r\n                    : 'rounded-bl-none' // Make the bottom-left corner sharp for bot messages\r\n                }`}\r\n              >\r\n                {/* Conditionally render the bot icon and TTS button for bot messages */}\r\n                {message.userId === 'bot' && (\r\n                  <div className=\"flex items-center gap-2 mb-2\">\r\n                    <Bot size={16} />\r\n                    {message.type === 'text' && (\r\n                      <button\r\n                        onClick={() => handleTextToSpeech(message.text)}\r\n                        className=\"text-white text-xs px-2 py-1 bg-slate-600 rounded-full hover:bg-slate-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                        disabled={isSpeaking || isAIGenerating || isImageGenerating}\r\n                      >\r\n                        <Volume2 size={12} className=\"inline-block mr-1\" />\r\n                        Speak ✨\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {/* The message content */}\r\n                {message.type === 'text' && (\r\n                  <p className=\"text-sm break-words inline-block\">{message.text}</p>\r\n                )}\r\n                {message.type === 'image' && (\r\n                  <div className=\"flex flex-col items-start gap-2\">\r\n                    <img src={message.imageUrl} alt=\"Generated\" className=\"rounded-lg max-w-full h-auto\" />\r\n                    <a href={message.imageUrl} download={`gemini-image-${index}.png`} className=\"flex items-center gap-1 text-xs text-blue-300 hover:text-blue-200 transition-colors\">\r\n                      <Download size={12} />\r\n                      Download Image\r\n                    </a>\r\n                  </div>\r\n                )}\r\n                {message.userId === userId && message.image && (\r\n                  <div className=\"mt-2\">\r\n                    <img src={`data:${message.image.mimeType};base64,${message.image.data}`} alt=\"Uploaded\" className=\"rounded-lg max-w-full h-auto\" />\r\n                  </div>\r\n                )}\r\n                \r\n                {/* Optional: Display the user ID for collaborative context */}\r\n                {message.userId !== 'bot' && (\r\n                  <div className=\"text-xs text-slate-400 mt-1\">\r\n                    User: {message.userId.substring(0, 8)}...\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* AI generating message indicator */}\r\n          {(isAIGenerating || isImageGenerating) && (\r\n            <div className=\"flex items-start justify-start\">\r\n              <div className=\"p-3 rounded-2xl bg-slate-700 text-slate-100 max-w-[70%] rounded-bl-none\">\r\n                <Bot size={16} className=\"inline-block mr-2\" />\r\n                <div className=\"dot-flashing inline-block align-middle ml-2\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* This empty div is our scroll anchor. */}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        \r\n        {/* Input area for sending messages. */}\r\n        <div className=\"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl\">\r\n          {imagePreviewUrl && (\r\n            <div className=\"relative mb-2 p-2 border border-slate-600 rounded-lg bg-slate-700\">\r\n              <img src={imagePreviewUrl} alt=\"Preview\" className=\"max-h-24 rounded-md\" />\r\n              <button\r\n                onClick={handleRemoveImage}\r\n                className=\"absolute top-1 right-1 p-1 bg-red-500 rounded-full text-white hover:bg-red-600 transition-colors\"\r\n              >\r\n                <XCircle size={16} />\r\n              </button>\r\n            </div>\r\n          )}\r\n          <div className=\"flex items-center gap-2\">\r\n            {/* The text input field. */}\r\n            <input\r\n              type=\"text\"\r\n              className=\"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\"\r\n              placeholder=\"Type your message...\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n              // Disable input if not ready or if an error occurred\r\n              disabled={!db || isAIGenerating || isSpeaking || isImageGenerating || !!error}\r\n            />\r\n            {/* Image upload button */}\r\n            <label className=\"p-3 bg-purple-600 text-white rounded-full shadow-lg hover:bg-purple-700 transition-all cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageUpload}\r\n                className=\"hidden\"\r\n                disabled={!db || isAIGenerating || isSpeaking || isImageGenerating || !!error}\r\n              />\r\n              <ImageIcon size={20} />\r\n            </label>\r\n            {/* The generate image button */}\r\n            <button\r\n              onClick={handleGenerateImage}\r\n              className=\"p-3 bg-amber-600 text-white rounded-full shadow-lg hover:bg-amber-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              disabled={!db || input.trim() === '' || isAIGenerating || isSpeaking || isImageGenerating || !!error}\r\n            >\r\n              <Wand size={20} />\r\n            </button>\r\n            {/* The send button. It's disabled if the input is empty or not authenticated. */}\r\n            <button\r\n              onClick={handleSendMessage}\r\n              className=\"p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              disabled={!db || (input.trim() === '' && !imageFile) || isAIGenerating || isSpeaking || isImageGenerating || !!error}\r\n            >\r\n              {/* Using the Send icon from lucide-react */}\r\n              <Send size={20} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}