{"ast":null,"code":"var _s = $RefreshSig$();\n/* global __firebase_config, __app_id, __initial_auth_token */\n\nimport { useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged, sendSignInLinkToEmail, isSignInWithEmailLink, signInWithEmailLink, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, collection, onSnapshot, doc, addDoc, serverTimestamp } from 'firebase/firestore';\nconst localFirebaseConfig = {\n  apiKey: \"AIzaSyDhJoNaFf0qgl4VTuUXj16ysJG1hycq-p8\",\n  authDomain: \"ai-chatbot-88602.firebaseapp.com\",\n  projectId: \"ai-chatbot-88602\",\n  storageBucket: \"ai-chatbot-88602.firebasestorage.app\",\n  messagingSenderId: \"167580287666\",\n  appId: \"1:167580287666:web:9e8313ae6e667e47d47fab\",\n  measurementId: \"G-CXKJ8QRLZ1\"\n};\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : localFirebaseConfig;\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\nfunction App() {\n  _s();\n  const [db, setDb] = useState(null);\n  const [auth, setAuth] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [email, setEmail] = useState('');\n  const [emailSent, setEmailSent] = useState(false);\n  const [isSigningInWithLink, setIsSigningInWithLink] = useState(false);\n  const [password, setPassword] = useState(''); // Add a state for password\n\n  useEffect(() => {\n    if (Object.keys(firebaseConfig).length === 0) {\n      setError('Firebase configuration is missing.');\n      setLoading(false);\n      return;\n    }\n    try {\n      const firebaseApp = initializeApp(firebaseConfig);\n      const authInstance = getAuth(firebaseApp);\n      const dbInstance = getFirestore(firebaseApp);\n      setAuth(authInstance);\n      setDb(dbInstance);\n      const unsubscribe = onAuthStateChanged(authInstance, currentUser => {\n        if (currentUser) {\n          setUser(currentUser);\n          setIsAuthReady(true);\n          setError(null);\n        } else {\n          setIsAuthReady(true);\n        }\n        setLoading(false);\n      });\n      return () => unsubscribe();\n    } catch (e) {\n      setError('Failed to initialize Firebase.');\n      setLoading(false);\n    }\n  }, []);\n\n  // New function for handling email/password registration\n  const handleSignUp = async () => {\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      console.log('User registered successfully.');\n    } catch (e) {\n      setError(`Registration error: ${e.message}`);\n    }\n  };\n\n  // New function for handling email/password login\n  const handleLogin = async () => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      console.log('User logged in successfully.');\n    } catch (e) {\n      setError(`Login error: ${e.message}`);\n    }\n  };\n\n  // Your existing useEffect for email link sign-in is fine, but make sure to include the new handlers\n  useEffect(() => {\n    if (!auth || !isAuthReady) return;\n    if (isSignInWithEmailLink(auth, window.location.href)) {\n      setIsSigningInWithLink(true);\n      setLoading(true);\n      let storedEmail = window.localStorage.getItem('emailForSignIn');\n      if (!storedEmail) {\n        storedEmail = window.prompt('Please provide your email for confirmation');\n      }\n      if (!storedEmail) {\n        setError(\"Email not provided for sign-in link.\");\n        setIsSigningInWithLink(false);\n        setLoading(false);\n        window.history.replaceState({}, document.title, window.location.pathname);\n        return;\n      }\n      signInWithEmailLink(auth, storedEmail, window.location.href).then(result => {\n        window.localStorage.removeItem('emailForSignIn');\n        setUser(result.user);\n        setIsSigningInWithLink(false);\n        setLoading(false);\n        setError(null);\n        window.history.replaceState({}, document.title, window.location.pathname);\n      }).catch(error => {\n        setError(`Error completing sign-in: ${error.message}`);\n        setIsSigningInWithLink(false);\n        setLoading(false);\n        window.history.replaceState({}, document.title, window.location.pathname);\n      });\n    } else if (!user && !initialAuthToken && !emailSent) {\n      // Your existing anonymous sign-in logic is here\n      // You can remove this or keep it depending on your app's needs\n    }\n  }, [auth, isAuthReady, user, emailSent, initialAuthToken]);\n\n  // You would need to add UI elements to call handleSignUp and handleLogin\n  // For example, a form with email, password, a sign-up button, and a login button.\n}\n_s(App, \"45MYe3fRORUYnvmgiOh/CXv/m5U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","initializeApp","getAuth","signInWithCustomToken","signInAnonymously","onAuthStateChanged","sendSignInLinkToEmail","isSignInWithEmailLink","signInWithEmailLink","createUserWithEmailAndPassword","signInWithEmailAndPassword","getFirestore","collection","onSnapshot","doc","addDoc","serverTimestamp","localFirebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseConfig","__firebase_config","JSON","parse","__app_id","initialAuthToken","__initial_auth_token","App","_s","db","setDb","auth","setAuth","isAuthReady","setIsAuthReady","user","setUser","loading","setLoading","error","setError","messages","setMessages","newMessage","setNewMessage","email","setEmail","emailSent","setEmailSent","isSigningInWithLink","setIsSigningInWithLink","password","setPassword","Object","keys","length","firebaseApp","authInstance","dbInstance","unsubscribe","currentUser","e","handleSignUp","console","log","message","handleLogin","window","location","href","storedEmail","localStorage","getItem","prompt","history","replaceState","document","title","pathname","then","result","removeItem","catch","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/App.js"],"sourcesContent":["/* global __firebase_config, __app_id, __initial_auth_token */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged, sendSignInLinkToEmail, isSignInWithEmailLink, signInWithEmailLink, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { getFirestore, collection, onSnapshot, doc, addDoc, serverTimestamp } from 'firebase/firestore';\r\n\r\nconst localFirebaseConfig = {\r\n  apiKey: \"AIzaSyDhJoNaFf0qgl4VTuUXj16ysJG1hycq-p8\",\r\n  authDomain: \"ai-chatbot-88602.firebaseapp.com\",\r\n  projectId: \"ai-chatbot-88602\",\r\n  storageBucket: \"ai-chatbot-88602.firebasestorage.app\",\r\n  messagingSenderId: \"167580287666\",\r\n  appId: \"1:167580287666:web:9e8313ae6e667e47d47fab\",\r\n  measurementId: \"G-CXKJ8QRLZ1\"\r\n};\r\n\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : localFirebaseConfig;\r\n\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n\r\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n\r\nfunction App() {\r\n  const [db, setDb] = useState(null);\r\n  const [auth, setAuth] = useState(null);\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [emailSent, setEmailSent] = useState(false);\r\n  const [isSigningInWithLink, setIsSigningInWithLink] = useState(false);\r\n  const [password, setPassword] = useState(''); // Add a state for password\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(firebaseConfig).length === 0) {\r\n      setError('Firebase configuration is missing.');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const firebaseApp = initializeApp(firebaseConfig);\r\n      const authInstance = getAuth(firebaseApp);\r\n      const dbInstance = getFirestore(firebaseApp);\r\n      setAuth(authInstance);\r\n      setDb(dbInstance);\r\n\r\n      const unsubscribe = onAuthStateChanged(authInstance, (currentUser) => {\r\n        if (currentUser) {\r\n          setUser(currentUser);\r\n          setIsAuthReady(true);\r\n          setError(null);\r\n        } else {\r\n          setIsAuthReady(true);\r\n        }\r\n        setLoading(false);\r\n      });\r\n      return () => unsubscribe();\r\n    } catch (e) {\r\n      setError('Failed to initialize Firebase.');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // New function for handling email/password registration\r\n  const handleSignUp = async () => {\r\n    try {\r\n      await createUserWithEmailAndPassword(auth, email, password);\r\n      console.log('User registered successfully.');\r\n    } catch (e) {\r\n      setError(`Registration error: ${e.message}`);\r\n    }\r\n  };\r\n\r\n  // New function for handling email/password login\r\n  const handleLogin = async () => {\r\n    try {\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      console.log('User logged in successfully.');\r\n    } catch (e) {\r\n      setError(`Login error: ${e.message}`);\r\n    }\r\n  };\r\n\r\n  // Your existing useEffect for email link sign-in is fine, but make sure to include the new handlers\r\n  useEffect(() => {\r\n    if (!auth || !isAuthReady) return;\r\n\r\n    if (isSignInWithEmailLink(auth, window.location.href)) {\r\n      setIsSigningInWithLink(true);\r\n      setLoading(true);\r\n      let storedEmail = window.localStorage.getItem('emailForSignIn');\r\n\r\n      if (!storedEmail) {\r\n        storedEmail = window.prompt('Please provide your email for confirmation');\r\n      }\r\n\r\n      if (!storedEmail) {\r\n        setError(\"Email not provided for sign-in link.\");\r\n        setIsSigningInWithLink(false);\r\n        setLoading(false);\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n        return;\r\n      }\r\n\r\n      signInWithEmailLink(auth, storedEmail, window.location.href)\r\n        .then((result) => {\r\n          window.localStorage.removeItem('emailForSignIn');\r\n          setUser(result.user);\r\n          setIsSigningInWithLink(false);\r\n          setLoading(false);\r\n          setError(null);\r\n          window.history.replaceState({}, document.title, window.location.pathname);\r\n        })\r\n        .catch((error) => {\r\n          setError(`Error completing sign-in: ${error.message}`);\r\n          setIsSigningInWithLink(false);\r\n          setLoading(false);\r\n          window.history.replaceState({}, document.title, window.location.pathname);\r\n        });\r\n    } else if (!user && !initialAuthToken && !emailSent) {\r\n      // Your existing anonymous sign-in logic is here\r\n      // You can remove this or keep it depending on your app's needs\r\n    }\r\n  }, [auth, isAuthReady, user, emailSent, initialAuthToken]);\r\n\r\n  // You would need to add UI elements to call handleSignUp and handleLogin\r\n  // For example, a form with email, password, a sign-up button, and a login button.\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}