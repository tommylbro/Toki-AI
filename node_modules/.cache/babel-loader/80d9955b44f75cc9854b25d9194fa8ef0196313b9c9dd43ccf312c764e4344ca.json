{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/* global __app_id, __firebase_config, __initial_auth_token */\nimport React, { useState, useEffect, useRef } from 'react';\n// Import Firebase modules at the top level for broader access\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, signInWithCustomToken } from 'firebase/auth';\nimport { getFunctions, httpsCallable } from 'firebase/functions';\nimport { getFirestore, doc, onSnapshot } from 'firebase/firestore';\nimport AIChatbot from './AI Chatbot';\nimport './src/index.css'; // Import Tailwind CSS styles\n\n// Define the main App component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store chat messages\n  const [messages, setMessages] = useState([]);\n  // State for the current input text\n  const [inputText, setInputText] = useState('');\n  // State to manage loading indicator during API calls\n  const [isLoading, setIsLoading] = useState(false);\n  // State for Firebase authentication and Firestore\n  const [db, setDb] = useState(null);\n  const [auth, setAuth] = useState(null);\n  const [userId, setUserId] = useState(null);\n  // Reference for the chat messages container to enable auto-scrolling\n  const messagesEndRef = useRef(null);\n\n  // Function to scroll to the bottom of the chat\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Initialize Firebase and set up authentication listener\n  useEffect(() => {\n    const initializeFirebase = async () => {\n      try {\n        // Global variables provided by the Canvas environment\n        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\n        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n        const app = initializeApp(firebaseConfig);\n        const firestoreDb = getFirestore(app);\n        const firebaseAuth = getAuth(app);\n        setDb(firestoreDb);\n        setAuth(firebaseAuth);\n\n        // Sign in with custom token or anonymously\n        if (initialAuthToken) {\n          await signInWithCustomToken(firebaseAuth, initialAuthToken);\n        } else {\n          await signInAnonymously(firebaseAuth);\n        }\n\n        // Listen for auth state changes\n        onAuthStateChanged(firebaseAuth, user => {\n          if (user) {\n            setUserId(user.uid);\n          } else {\n            // If no user, generate a random ID for anonymous use\n            setUserId(crypto.randomUUID());\n          }\n        });\n      } catch (error) {\n        console.error(\"Error initializing Firebase:\", error);\n      }\n    };\n    initializeFirebase();\n  }, []); // Run only once on component mount\n\n  // Listen for real-time chat messages from Firestore\n  useEffect(() => {\n    if (!db || !userId) return; // Ensure db and userId are available\n\n    // Define the collection path for public data\n    const chatCollectionRef = collection(db, `artifacts/${__app_id}/public/data/messages`);\n    // Create a query to order messages by timestamp\n    const q = query(chatCollectionRef, orderBy('timestamp', 'asc'));\n\n    // Set up real-time listener\n    const unsubscribe = onSnapshot(q, snapshot => {\n      const fetchedMessages = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setMessages(fetchedMessages);\n    }, error => {\n      console.error(\"Error fetching messages:\", error);\n    });\n\n    // Clean up the listener on component unmount\n    return () => unsubscribe();\n  }, [db, userId]); // Re-run if db or userId changes\n\n  // Scroll to bottom whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Function to send a message to the Gemini API\n  const sendMessage = async () => {\n    if (!inputText.trim() || isLoading || !db || !userId) return;\n    const userMessage = {\n      text: inputText,\n      sender: userId,\n      // Use the authenticated user ID\n      timestamp: serverTimestamp(),\n      // Firestore server timestamp\n      isBot: false\n    };\n\n    // Add user message to Firestore\n    try {\n      await addDoc(collection(db, `artifacts/${__app_id}/public/data/messages`), userMessage);\n    } catch (error) {\n      console.error(\"Error adding user message to Firestore:\", error);\n      // Optionally, add a local message to indicate failure\n      setMessages(prev => [...prev, {\n        ...userMessage,\n        text: \"Failed to send message.\",\n        id: Date.now(),\n        timestamp: new Date()\n      }]);\n      setInputText('');\n      return;\n    }\n    setInputText(''); // Clear input immediately\n    setIsLoading(true); // Show loading indicator\n\n    try {\n      let chatHistory = messages.map(msg => ({\n        role: msg.isBot ? \"model\" : \"user\",\n        parts: [{\n          text: msg.text\n        }]\n      }));\n      // Add the current user message to chat history for the API call\n      chatHistory.push({\n        role: \"user\",\n        parts: [{\n          text: userMessage.text\n        }]\n      });\n      const payload = {\n        contents: chatHistory\n      };\n      const apiKey = \"\"; // Canvas will provide this at runtime\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n      let response;\n      let result;\n      let retries = 0;\n      const maxRetries = 5;\n      const baseDelay = 1000; // 1 second\n\n      // Implement exponential backoff for API calls\n      while (retries < maxRetries) {\n        try {\n          response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n          });\n          if (response.ok) {\n            result = await response.json();\n            break; // Exit loop if successful\n          } else if (response.status === 429) {\n            // Too Many Requests\n            const delay = baseDelay * Math.pow(2, retries) + Math.random() * 1000; // Add jitter\n            console.warn(`Rate limit hit. Retrying in ${delay / 1000} seconds...`);\n            await new Promise(res => setTimeout(res, delay));\n            retries++;\n          } else {\n            throw new Error(`API error: ${response.status} ${response.statusText}`);\n          }\n        } catch (error) {\n          console.error(\"Fetch error during retry:\", error);\n          if (retries === maxRetries - 1) throw error; // Re-throw if last retry\n          const delay = baseDelay * Math.pow(2, retries) + Math.random() * 1000;\n          console.warn(`Fetch failed. Retrying in ${delay / 1000} seconds...`);\n          await new Promise(res => setTimeout(res, delay));\n          retries++;\n        }\n      }\n      let botResponseText = \"Sorry, I couldn't get a response from the AI.\";\n      if (result && result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        botResponseText = result.candidates[0].content.parts[0].text;\n      }\n      const botMessage = {\n        text: botResponseText,\n        sender: 'bot',\n        timestamp: serverTimestamp(),\n        isBot: true\n      };\n\n      // Add bot message to Firestore\n      await addDoc(collection(db, `artifacts/${__app_id}/public/data/messages`), botMessage);\n    } catch (error) {\n      console.error(\"Error calling Gemini API or saving bot message:\", error);\n      // Add an error message to the chat if API call fails\n      const errorMessage = {\n        text: \"Oops! Something went wrong while getting a response. Please try again.\",\n        sender: 'bot',\n        timestamp: serverTimestamp(),\n        isBot: true\n      };\n      await addDoc(collection(db, `artifacts/${__app_id}/public/data/messages`), errorMessage);\n    } finally {\n      setIsLoading(false); // Hide loading indicator\n    }\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault(); // Prevent new line in textarea\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-gray-100 font-inter antialiased\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-gradient-to-r from-purple-600 to-indigo-700 text-white p-4 shadow-lg rounded-b-xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-center\",\n        children: \"AI Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), userId && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-center mt-1 opacity-80\",\n        children: [\"Your User ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-mono bg-white bg-opacity-20 px-2 py-1 rounded-md\",\n          children: userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4 space-y-4 pb-20\",\n      children: [\" \", messages.length === 0 && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-gray-500 mt-10\",\n        children: \"Start a conversation! Type your message below.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this), messages.map(msg => {\n        var _msg$timestamp;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${msg.isBot ? 'justify-start' : 'justify-end'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-md ${msg.isBot ? 'bg-white text-gray-800 rounded-bl-none' : 'bg-indigo-500 text-white rounded-br-none'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm break-words\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs opacity-75 mt-1 block\",\n              children: (_msg$timestamp = msg.timestamp) !== null && _msg$timestamp !== void 0 && _msg$timestamp.toDate ? msg.timestamp.toDate().toLocaleTimeString() : new Date().toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this)\n        }, msg.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this);\n      }), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-md bg-white text-gray-800 rounded-bl-none\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot-flashing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-2 text-sm\",\n              children: \"Typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-0 left-0 right-0 bg-white p-4 shadow-lg border-t border-gray-200 flex items-center space-x-3 rounded-t-xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none\",\n        rows: \"1\",\n        placeholder: \"Type your message...\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        onKeyPress: handleKeyPress,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\",\n        onClick: sendMessage,\n        disabled: !inputText.trim() || isLoading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');\n                body {\n                    font-family: 'Inter', sans-serif;\n                }\n                .dot-flashing {\n                    position: relative;\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 5px;\n                    background-color: #9880ff;\n                    color: #9880ff;\n                    animation: dotFlashing 1s infinite linear alternate;\n                    animation-delay: .5s;\n                }\n                .dot-flashing::before, .dot-flashing::after {\n                    content: '';\n                    display: inline-block;\n                    position: absolute;\n                    top: 0;\n                    left: -15px;\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 5px;\n                    background-color: #9880ff;\n                    color: #9880ff;\n                    animation: dotFlashing 1s infinite linear alternate;\n                }\n                .dot-flashing::after {\n                    left: 15px;\n                    animation-delay: 1s;\n                }\n                @keyframes dotFlashing {\n                    0% {\n                        background-color: #9880ff;\n                    }\n                    50%, 100% {\n                        background-color: #ede9fe;\n                    }\n                }\n            `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"jBshM2dfIfEbpeJi4z4nycjVADc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initializeApp","getAuth","signInAnonymously","signInWithCustomToken","getFunctions","httpsCallable","getFirestore","doc","onSnapshot","AIChatbot","jsxDEV","_jsxDEV","App","_s","messages","setMessages","inputText","setInputText","isLoading","setIsLoading","db","setDb","auth","setAuth","userId","setUserId","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","initializeFirebase","appId","__app_id","firebaseConfig","__firebase_config","JSON","parse","initialAuthToken","__initial_auth_token","app","firestoreDb","firebaseAuth","onAuthStateChanged","user","uid","crypto","randomUUID","error","console","chatCollectionRef","collection","q","query","orderBy","unsubscribe","snapshot","fetchedMessages","docs","map","id","data","sendMessage","trim","userMessage","text","sender","timestamp","serverTimestamp","isBot","addDoc","prev","Date","now","chatHistory","msg","role","parts","push","payload","contents","apiKey","apiUrl","response","result","retries","maxRetries","baseDelay","fetch","method","headers","body","stringify","ok","json","status","delay","Math","pow","random","warn","Promise","res","setTimeout","Error","statusText","botResponseText","candidates","length","content","botMessage","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_msg$timestamp","toDate","toLocaleTimeString","ref","rows","placeholder","value","onChange","target","onKeyPress","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/App.js"],"sourcesContent":["/* global __app_id, __firebase_config, __initial_auth_token */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n// Import Firebase modules at the top level for broader access\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken } from 'firebase/auth';\r\nimport { getFunctions, httpsCallable } from 'firebase/functions';\r\nimport { getFirestore, doc, onSnapshot } from 'firebase/firestore';\r\nimport AIChatbot from './AI Chatbot';\r\nimport './src/index.css'; // Import Tailwind CSS styles\r\n\r\n// Define the main App component\r\nfunction App() {\r\n    // State to store chat messages\r\n    const [messages, setMessages] = useState([]);\r\n    // State for the current input text\r\n    const [inputText, setInputText] = useState('');\r\n    // State to manage loading indicator during API calls\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    // State for Firebase authentication and Firestore\r\n    const [db, setDb] = useState(null);\r\n    const [auth, setAuth] = useState(null);\r\n    const [userId, setUserId] = useState(null);\r\n    // Reference for the chat messages container to enable auto-scrolling\r\n    const messagesEndRef = useRef(null);\r\n\r\n    // Function to scroll to the bottom of the chat\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    // Initialize Firebase and set up authentication listener\r\n    useEffect(() => {\r\n        const initializeFirebase = async () => {\r\n            try {\r\n                // Global variables provided by the Canvas environment\r\n                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n                const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\r\n                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n\r\n                const app = initializeApp(firebaseConfig);\r\n                const firestoreDb = getFirestore(app);\r\n                const firebaseAuth = getAuth(app);\r\n\r\n                setDb(firestoreDb);\r\n                setAuth(firebaseAuth);\r\n\r\n                // Sign in with custom token or anonymously\r\n                if (initialAuthToken) {\r\n                    await signInWithCustomToken(firebaseAuth, initialAuthToken);\r\n                } else {\r\n                    await signInAnonymously(firebaseAuth);\r\n                }\r\n\r\n                // Listen for auth state changes\r\n                onAuthStateChanged(firebaseAuth, (user) => {\r\n                    if (user) {\r\n                        setUserId(user.uid);\r\n                    } else {\r\n                        // If no user, generate a random ID for anonymous use\r\n                        setUserId(crypto.randomUUID());\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error(\"Error initializing Firebase:\", error);\r\n            }\r\n        };\r\n\r\n        initializeFirebase();\r\n    }, []); // Run only once on component mount\r\n\r\n    // Listen for real-time chat messages from Firestore\r\n    useEffect(() => {\r\n        if (!db || !userId) return; // Ensure db and userId are available\r\n\r\n        // Define the collection path for public data\r\n        const chatCollectionRef = collection(db, `artifacts/${__app_id}/public/data/messages`);\r\n        // Create a query to order messages by timestamp\r\n        const q = query(chatCollectionRef, orderBy('timestamp', 'asc'));\r\n\r\n        // Set up real-time listener\r\n        const unsubscribe = onSnapshot(q, (snapshot) => {\r\n            const fetchedMessages = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data()\r\n            }));\r\n            setMessages(fetchedMessages);\r\n        }, (error) => {\r\n            console.error(\"Error fetching messages:\", error);\r\n        });\r\n\r\n        // Clean up the listener on component unmount\r\n        return () => unsubscribe();\r\n    }, [db, userId]); // Re-run if db or userId changes\r\n\r\n    // Scroll to bottom whenever messages update\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    // Function to send a message to the Gemini API\r\n    const sendMessage = async () => {\r\n        if (!inputText.trim() || isLoading || !db || !userId) return;\r\n\r\n        const userMessage = {\r\n            text: inputText,\r\n            sender: userId, // Use the authenticated user ID\r\n            timestamp: serverTimestamp(), // Firestore server timestamp\r\n            isBot: false,\r\n        };\r\n\r\n        // Add user message to Firestore\r\n        try {\r\n            await addDoc(collection(db, `artifacts/${__app_id}/public/data/messages`), userMessage);\r\n        } catch (error) {\r\n            console.error(\"Error adding user message to Firestore:\", error);\r\n            // Optionally, add a local message to indicate failure\r\n            setMessages(prev => [...prev, { ...userMessage, text: \"Failed to send message.\", id: Date.now(), timestamp: new Date() }]);\r\n            setInputText('');\r\n            return;\r\n        }\r\n\r\n        setInputText(''); // Clear input immediately\r\n        setIsLoading(true); // Show loading indicator\r\n\r\n        try {\r\n            let chatHistory = messages.map(msg => ({\r\n                role: msg.isBot ? \"model\" : \"user\",\r\n                parts: [{ text: msg.text }]\r\n            }));\r\n            // Add the current user message to chat history for the API call\r\n            chatHistory.push({ role: \"user\", parts: [{ text: userMessage.text }] });\r\n\r\n            const payload = { contents: chatHistory };\r\n            const apiKey = \"\"; // Canvas will provide this at runtime\r\n            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n\r\n            let response;\r\n            let result;\r\n            let retries = 0;\r\n            const maxRetries = 5;\r\n            const baseDelay = 1000; // 1 second\r\n\r\n            // Implement exponential backoff for API calls\r\n            while (retries < maxRetries) {\r\n                try {\r\n                    response = await fetch(apiUrl, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify(payload)\r\n                    });\r\n\r\n                    if (response.ok) {\r\n                        result = await response.json();\r\n                        break; // Exit loop if successful\r\n                    } else if (response.status === 429) { // Too Many Requests\r\n                        const delay = baseDelay * Math.pow(2, retries) + Math.random() * 1000; // Add jitter\r\n                        console.warn(`Rate limit hit. Retrying in ${delay / 1000} seconds...`);\r\n                        await new Promise(res => setTimeout(res, delay));\r\n                        retries++;\r\n                    } else {\r\n                        throw new Error(`API error: ${response.status} ${response.statusText}`);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Fetch error during retry:\", error);\r\n                    if (retries === maxRetries - 1) throw error; // Re-throw if last retry\r\n                    const delay = baseDelay * Math.pow(2, retries) + Math.random() * 1000;\r\n                    console.warn(`Fetch failed. Retrying in ${delay / 1000} seconds...`);\r\n                    await new Promise(res => setTimeout(res, delay));\r\n                    retries++;\r\n                }\r\n            }\r\n\r\n            let botResponseText = \"Sorry, I couldn't get a response from the AI.\";\r\n            if (result && result.candidates && result.candidates.length > 0 &&\r\n                result.candidates[0].content && result.candidates[0].content.parts &&\r\n                result.candidates[0].content.parts.length > 0) {\r\n                botResponseText = result.candidates[0].content.parts[0].text;\r\n            }\r\n\r\n            const botMessage = {\r\n                text: botResponseText,\r\n                sender: 'bot',\r\n                timestamp: serverTimestamp(),\r\n                isBot: true,\r\n            };\r\n\r\n            // Add bot message to Firestore\r\n            await addDoc(collection(db, `artifacts/${__app_id}/public/data/messages`), botMessage);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error calling Gemini API or saving bot message:\", error);\r\n            // Add an error message to the chat if API call fails\r\n            const errorMessage = {\r\n                text: \"Oops! Something went wrong while getting a response. Please try again.\",\r\n                sender: 'bot',\r\n                timestamp: serverTimestamp(),\r\n                isBot: true,\r\n            };\r\n            await addDoc(collection(db, `artifacts/${__app_id}/public/data/messages`), errorMessage);\r\n        } finally {\r\n            setIsLoading(false); // Hide loading indicator\r\n        }\r\n    };\r\n\r\n    // Handle Enter key press\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault(); // Prevent new line in textarea\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col h-screen bg-gray-100 font-inter antialiased\">\r\n            {/* Header */}\r\n            <header className=\"bg-gradient-to-r from-purple-600 to-indigo-700 text-white p-4 shadow-lg rounded-b-xl\">\r\n                <h1 className=\"text-3xl font-bold text-center\">AI Chatbot</h1>\r\n                {userId && (\r\n                    <p className=\"text-sm text-center mt-1 opacity-80\">\r\n                        Your User ID: <span className=\"font-mono bg-white bg-opacity-20 px-2 py-1 rounded-md\">{userId}</span>\r\n                    </p>\r\n                )}\r\n            </header>\r\n\r\n            {/* Chat Messages Area */}\r\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4 pb-20\"> {/* Added pb-20 to ensure space for input */}\r\n                {messages.length === 0 && !isLoading && (\r\n                    <div className=\"text-center text-gray-500 mt-10\">\r\n                        Start a conversation! Type your message below.\r\n                    </div>\r\n                )}\r\n                {messages.map((msg) => (\r\n                    <div\r\n                        key={msg.id}\r\n                        className={`flex ${msg.isBot ? 'justify-start' : 'justify-end'}`}\r\n                    >\r\n                        <div\r\n                            className={`max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-md ${\r\n                                msg.isBot\r\n                                    ? 'bg-white text-gray-800 rounded-bl-none'\r\n                                    : 'bg-indigo-500 text-white rounded-br-none'\r\n                            }`}\r\n                        >\r\n                            <p className=\"text-sm break-words\">{msg.text}</p>\r\n                            <span className=\"text-xs opacity-75 mt-1 block\">\r\n                                {msg.timestamp?.toDate ? msg.timestamp.toDate().toLocaleTimeString() : new Date().toLocaleTimeString()}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {isLoading && (\r\n                    <div className=\"flex justify-start\">\r\n                        <div className=\"max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-md bg-white text-gray-800 rounded-bl-none\">\r\n                            <div className=\"flex items-center\">\r\n                                <span className=\"dot-flashing\"></span>\r\n                                <span className=\"ml-2 text-sm\">Typing...</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div ref={messagesEndRef} /> {/* Scroll target */}\r\n            </div>\r\n\r\n            {/* Input Area */}\r\n            <div className=\"fixed bottom-0 left-0 right-0 bg-white p-4 shadow-lg border-t border-gray-200 flex items-center space-x-3 rounded-t-xl\">\r\n                <textarea\r\n                    className=\"flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none\"\r\n                    rows=\"1\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={inputText}\r\n                    onChange={(e) => setInputText(e.target.value)}\r\n                    onKeyPress={handleKeyPress}\r\n                    disabled={isLoading}\r\n                ></textarea>\r\n                <button\r\n                    className=\"bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    onClick={sendMessage}\r\n                    disabled={!inputText.trim() || isLoading}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n\r\n            {/* CSS for dot-flashing loading indicator */}\r\n            <style>{`\r\n                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');\r\n                body {\r\n                    font-family: 'Inter', sans-serif;\r\n                }\r\n                .dot-flashing {\r\n                    position: relative;\r\n                    width: 10px;\r\n                    height: 10px;\r\n                    border-radius: 5px;\r\n                    background-color: #9880ff;\r\n                    color: #9880ff;\r\n                    animation: dotFlashing 1s infinite linear alternate;\r\n                    animation-delay: .5s;\r\n                }\r\n                .dot-flashing::before, .dot-flashing::after {\r\n                    content: '';\r\n                    display: inline-block;\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: -15px;\r\n                    width: 10px;\r\n                    height: 10px;\r\n                    border-radius: 5px;\r\n                    background-color: #9880ff;\r\n                    color: #9880ff;\r\n                    animation: dotFlashing 1s infinite linear alternate;\r\n                }\r\n                .dot-flashing::after {\r\n                    left: 15px;\r\n                    animation-delay: 1s;\r\n                }\r\n                @keyframes dotFlashing {\r\n                    0% {\r\n                        background-color: #9880ff;\r\n                    }\r\n                    50%, 100% {\r\n                        background-color: #ede9fe;\r\n                    }\r\n                }\r\n            `}</style>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}