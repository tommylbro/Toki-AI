{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// This line tells ESLint to ignore the following global variables that are provided by the Canvas environment.\n/* global __app_id, __firebase_config, __initial_auth_token */\n\nimport { useState, useEffect, useRef } from 'react';\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth, signInWithCustomToken, signInAnonymously } from 'firebase/auth';\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { Send, Bot } from 'lucide-react'; // Using Lucide for a modern icon\n\n// This is the main App component for our chat application.\n// It handles all the UI, state management, and Firebase interactions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State to hold the chat messages. An array of objects.\n  const [messages, setMessages] = useState([]);\n  // State to hold the user's input in the text field.\n  const [input, setInput] = useState('');\n  // State to hold the Firebase database instance.\n  const [db, setDb] = useState(null);\n  // State to hold the current user's ID.\n  const [userId, setUserId] = useState(null);\n  // State to track if the application is ready and authenticated.\n  const [isReady, setIsReady] = useState(false);\n  // State to track if an AI response is being generated.\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\n  // State to hold any authentication or initialization errors.\n  const [error, setError] = useState(null);\n  // A ref to automatically scroll to the latest message.\n  const messagesEndRef = useRef(null);\n\n  // useEffect to handle Firebase initialization and authentication.\n  // The empty dependency array `[]` ensures this runs only once on component mount.\n  useEffect(() => {\n    // These are provided by the Canvas environment. The firebaseConfig is now\n    // automatically handled, so there is no need to manually paste it.\n    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\n    const initFirebase = async () => {\n      try {\n        // Check if the firebaseConfig object is empty.\n        if (Object.keys(firebaseConfig).length === 0) {\n          throw new Error(\"Firebase configuration not provided by the environment. The app cannot initialize.\");\n        }\n\n        // Initialize Firebase application.\n        const app = getApps().length ? getApp() : initializeApp(firebaseConfig);\n        // Get the Firestore and Auth instances.\n        const firestore = getFirestore(app);\n        const authInstance = getAuth(app);\n\n        // Sign in the user.\n        let user;\n        if (initialAuthToken) {\n          user = (await signInWithCustomToken(authInstance, initialAuthToken)).user;\n        } else {\n          user = (await signInAnonymously(authInstance)).user;\n        }\n        if (user) {\n          console.log(\"User signed in with UID:\", user.uid);\n          setUserId(user.uid);\n          setDb(firestore);\n          setIsReady(true);\n          setError(null); // Clear any previous errors on successful sign-in\n        } else {\n          throw new Error(\"User sign-in failed.\");\n        }\n      } catch (e) {\n        // Log any initialization or authentication errors.\n        console.error(\"Firebase initialization or authentication failed:\", e);\n        setError(`Error: Firebase initialization failed. ${e.message}`);\n        setIsReady(false);\n      }\n    };\n    initFirebase();\n  }, []); // The empty array ensures this effect runs only once.\n\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\n  // This effect will run whenever `isReady` or `db` changes.\n  useEffect(() => {\n    // We only attach the listener if Firebase is fully initialized and authenticated.\n    if (isReady && db) {\n      // Define the collection path for our chat messages.\n      // This path is for public data, so all users can see it.\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n\n      // Create a query to get messages from the 'messages' collection, ordered by timestamp.\n      const q = query(collection(db, path));\n\n      // Use `onSnapshot` for real-time listening.\n      const unsubscribe = onSnapshot(q, querySnapshot => {\n        const fetchedMessages = [];\n        querySnapshot.forEach(doc => {\n          fetchedMessages.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        // Sort the messages by timestamp to ensure they are in the correct order.\n        fetchedMessages.sort((a, b) => {\n          var _a$timestamp, _b$timestamp;\n          return (((_a$timestamp = a.timestamp) === null || _a$timestamp === void 0 ? void 0 : _a$timestamp.toMillis()) || 0) - (((_b$timestamp = b.timestamp) === null || _b$timestamp === void 0 ? void 0 : _b$timestamp.toMillis()) || 0);\n        });\n        setMessages(fetchedMessages);\n      }, error => {\n        console.error(\"Error fetching messages:\", error);\n        setError(\"Failed to fetch messages. Check your Firestore rules.\");\n      });\n\n      // The return function from `useEffect` is a cleanup function.\n      // It will unsubscribe from the listener when the component unmounts.\n      return () => unsubscribe();\n    }\n  }, [isReady, db]);\n\n  // Use a separate useEffect to handle AI responses to user messages\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    // Check if the last message is from the user and an AI response is not already in progress.\n    if (db && lastMessage && lastMessage.userId === userId && !isAIGenerating) {\n      const getAIResponse = async () => {\n        setIsAIGenerating(true);\n        console.log(\"[AI] User sent a message. Generating AI response...\");\n        try {\n          // Prepare chat history for the API call.\n          // Note: The `map` function here creates a new array of objects with\n          // the required `role` and `parts` structure for the API.\n          const chatHistory = messages.map(msg => ({\n            role: msg.userId === userId ? 'user' : 'model',\n            parts: [{\n              text: msg.text\n            }]\n          }));\n          const payload = {\n            contents: chatHistory\n          };\n          const apiKey = \"\"; // API key is automatically provided by the Canvas environment\n          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n\n          // Use exponential backoff for API calls to handle potential throttling\n          let response;\n          let retryCount = 0;\n          const maxRetries = 5;\n          const initialDelay = 1000;\n          while (retryCount < maxRetries) {\n            try {\n              response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n              });\n              if (response.status !== 429) {\n                // 429 is Too Many Requests\n                break; // Success or non-retryable error, so break\n              }\n              // If we get a 429, log it and prepare for retry\n              console.warn(`[API] Rate limit hit. Retrying in ${initialDelay * Math.pow(2, retryCount)}ms...`);\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\n              retryCount++;\n            } catch (fetchError) {\n              // Non-HTTP errors (e.g., network issues)\n              console.error(`[API] Fetch failed. Retrying...`, fetchError);\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\n              retryCount++;\n            }\n          }\n          if (!response || !response.ok) {\n            var _response;\n            throw new Error(`API error: ${((_response = response) === null || _response === void 0 ? void 0 : _response.statusText) || 'Unknown error'}`);\n          }\n          const result = await response.json();\n          let responseText = \"Sorry, I couldn't generate a response.\";\n          if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n            responseText = result.candidates[0].content.parts[0].text;\n            console.log(\"[AI] Generated AI response successfully.\");\n          }\n\n          // Add the AI's response to Firestore.\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\n          await addDoc(collection(db, path), {\n            text: responseText,\n            userId: 'bot',\n            // Use a consistent ID for the bot\n            timestamp: serverTimestamp()\n          });\n        } catch (e) {\n          console.error(\"[AI ERROR] Error getting AI response:\", e);\n          // Add an error message from the bot if the API call fails.\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\n          await addDoc(collection(db, path), {\n            text: `Sorry, I am having trouble processing that request. Error: ${e.message}`,\n            userId: 'bot',\n            timestamp: serverTimestamp()\n          });\n        } finally {\n          setIsAIGenerating(false);\n        }\n      };\n      getAIResponse();\n    }\n  }, [messages, db, isAIGenerating, userId]);\n\n  // Function to handle sending a new message.\n  const handleSendMessage = async () => {\n    if (input.trim() === '' || !db || !userId) {\n      console.log(\"Cannot send empty message or Firebase not ready.\");\n      return;\n    }\n    try {\n      // Define the path for the public chat messages.\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\n\n      // Add a new document to the 'messages' collection with the user ID, message text, and a timestamp.\n      await addDoc(collection(db, path), {\n        text: input,\n        userId: userId,\n        timestamp: serverTimestamp()\n      });\n      // Clear the input field after sending.\n      setInput('');\n    } catch (error) {\n      console.error(\"Error adding document: \", error);\n      setError(\"Failed to send message. Please try again.\");\n    }\n  };\n\n  // Function to handle key presses in the input field.\n  const handleKeyDown = event => {\n    // If the 'Enter' key is pressed, send the message.\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  // A useEffect to scroll the chat window to the bottom whenever new messages arrive.\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // CSS for the dot-flashing loading animation. This is in a template literal\n  // because we don't have an external CSS file for React immersives.\n  const dotFlashingCss = `\n    .dot-flashing {\n      position: relative;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite linear alternate;\n      animation-delay: .5s;\n    }\n    .dot-flashing::before, .dot-flashing::after {\n      content: '';\n      display: inline-block;\n      position: absolute;\n      top: 0;\n    }\n    .dot-flashing::before {\n      left: -10px;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite alternate;\n    }\n    .dot-flashing::after {\n      left: 10px;\n      width: 5px;\n      height: 5px;\n      border-radius: 5px;\n      background-color: #efefef;\n      color: #efefef;\n      animation: dotFlashing 1s infinite alternate;\n      animation-delay: 1s;\n    }\n    @keyframes dotFlashing {\n      0% { background-color: #efefef; }\n      50%, 100% { background-color: #9e9e9e; }\n    }\n  `;\n  return (\n    /*#__PURE__*/\n    // Main container with a dark background and full viewport height/width.\n    // It uses flexbox to center the chat container both horizontally and vertically.\n    _jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: dotFlashingCss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full max-w-sm md:max-w-md bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\",\n          children: \"AI Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 p-4 overflow-y-auto space-y-4\",\n          children: [!isReady && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-slate-400 mt-10\",\n            children: \"Initializing Firebase...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-red-400 mt-10 p-4 bg-red-900 rounded-lg\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), isReady && !error && messages.map((message, index) =>\n          /*#__PURE__*/\n          // A message bubble. We use different styles for the current user's messages and the bot's.\n          _jsxDEV(\"div\", {\n            className: `flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `max-w-[70%] p-3 rounded-2xl shadow-md ${message.userId === userId ? 'bg-blue-600 text-white' // User's message style\n              : 'bg-slate-700 text-slate-100' // Bot's message style\n              } ${message.userId === userId ? 'rounded-br-none' // Make the bottom-right corner sharp for user messages\n              : 'rounded-bl-none' // Make the bottom-left corner sharp for bot messages\n              }`,\n              children: [message.userId === 'bot' && /*#__PURE__*/_jsxDEV(Bot, {\n                size: 16,\n                className: \"inline-block mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 46\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm break-words inline-block\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 17\n              }, this), message.userId !== 'bot' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-slate-400 mt-1\",\n                children: [\"User: \", message.userId.substring(0, 8), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)), isAIGenerating && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start justify-start\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 rounded-2xl bg-slate-700 text-slate-100 max-w-[70%] rounded-bl-none\",\n              children: [/*#__PURE__*/_jsxDEV(Bot, {\n                size: 16,\n                className: \"inline-block mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dot-flashing inline-block align-middle ml-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\",\n            placeholder: \"Type your message...\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyDown: handleKeyDown\n            // Disable input if not ready or if an error occurred\n            ,\n            disabled: !isReady || isAIGenerating || !!error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            className: \"ml-3 p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\",\n            disabled: !isReady || input.trim() === '' || isAIGenerating || !!error,\n            children: /*#__PURE__*/_jsxDEV(Send, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"xZPLXfq0gq8bRKQ9e82/PzyZYag=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","initializeApp","getApps","getApp","getAuth","signInWithCustomToken","signInAnonymously","getFirestore","collection","query","onSnapshot","addDoc","serverTimestamp","Send","Bot","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","db","setDb","userId","setUserId","isReady","setIsReady","isAIGenerating","setIsAIGenerating","error","setError","messagesEndRef","appId","__app_id","initialAuthToken","__initial_auth_token","firebaseConfig","__firebase_config","JSON","parse","initFirebase","Object","keys","length","Error","app","firestore","authInstance","user","console","log","uid","e","message","currentAppId","path","q","unsubscribe","querySnapshot","fetchedMessages","forEach","doc","push","id","data","sort","a","b","_a$timestamp","_b$timestamp","timestamp","toMillis","lastMessage","getAIResponse","chatHistory","map","msg","role","parts","text","payload","contents","apiKey","apiUrl","response","retryCount","maxRetries","initialDelay","fetch","method","headers","body","stringify","status","warn","Math","pow","Promise","resolve","setTimeout","fetchError","ok","_response","statusText","result","json","responseText","candidates","content","handleSendMessage","trim","handleKeyDown","event","key","_messagesEndRef$curre","current","scrollIntoView","behavior","dotFlashingCss","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","size","substring","ref","type","placeholder","value","onChange","target","onKeyDown","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/App.js"],"sourcesContent":["// This line tells ESLint to ignore the following global variables that are provided by the Canvas environment.\r\n/* global __app_id, __firebase_config, __initial_auth_token */\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { initializeApp, getApps, getApp } from 'firebase/app';\r\nimport { getAuth, signInWithCustomToken, signInAnonymously } from 'firebase/auth';\r\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { Send, Bot } from 'lucide-react'; // Using Lucide for a modern icon\r\n\r\n// This is the main App component for our chat application.\r\n// It handles all the UI, state management, and Firebase interactions.\r\nexport default function App() {\r\n  // State to hold the chat messages. An array of objects.\r\n  const [messages, setMessages] = useState([]);\r\n  // State to hold the user's input in the text field.\r\n  const [input, setInput] = useState('');\r\n  // State to hold the Firebase database instance.\r\n  const [db, setDb] = useState(null);\r\n  // State to hold the current user's ID.\r\n  const [userId, setUserId] = useState(null);\r\n  // State to track if the application is ready and authenticated.\r\n  const [isReady, setIsReady] = useState(false);\r\n  // State to track if an AI response is being generated.\r\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\r\n  // State to hold any authentication or initialization errors.\r\n  const [error, setError] = useState(null);\r\n  // A ref to automatically scroll to the latest message.\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // useEffect to handle Firebase initialization and authentication.\r\n  // The empty dependency array `[]` ensures this runs only once on component mount.\r\n  useEffect(() => {\r\n    // These are provided by the Canvas environment. The firebaseConfig is now\r\n    // automatically handled, so there is no need to manually paste it.\r\n    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\r\n\r\n    const initFirebase = async () => {\r\n      try {\r\n        // Check if the firebaseConfig object is empty.\r\n        if (Object.keys(firebaseConfig).length === 0) {\r\n          throw new Error(\"Firebase configuration not provided by the environment. The app cannot initialize.\");\r\n        }\r\n        \r\n        // Initialize Firebase application.\r\n        const app = getApps().length ? getApp() : initializeApp(firebaseConfig);\r\n        // Get the Firestore and Auth instances.\r\n        const firestore = getFirestore(app);\r\n        const authInstance = getAuth(app);\r\n\r\n        // Sign in the user.\r\n        let user;\r\n        if (initialAuthToken) {\r\n          user = (await signInWithCustomToken(authInstance, initialAuthToken)).user;\r\n        } else {\r\n          user = (await signInAnonymously(authInstance)).user;\r\n        }\r\n\r\n        if (user) {\r\n          console.log(\"User signed in with UID:\", user.uid);\r\n          setUserId(user.uid);\r\n          setDb(firestore);\r\n          setIsReady(true);\r\n          setError(null); // Clear any previous errors on successful sign-in\r\n        } else {\r\n          throw new Error(\"User sign-in failed.\");\r\n        }\r\n      } catch (e) {\r\n        // Log any initialization or authentication errors.\r\n        console.error(\"Firebase initialization or authentication failed:\", e);\r\n        setError(`Error: Firebase initialization failed. ${e.message}`);\r\n        setIsReady(false);\r\n      }\r\n    };\r\n\r\n    initFirebase();\r\n  }, []); // The empty array ensures this effect runs only once.\r\n\r\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\r\n  // This effect will run whenever `isReady` or `db` changes.\r\n  useEffect(() => {\r\n    // We only attach the listener if Firebase is fully initialized and authenticated.\r\n    if (isReady && db) {\r\n      // Define the collection path for our chat messages.\r\n      // This path is for public data, so all users can see it.\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      \r\n      // Create a query to get messages from the 'messages' collection, ordered by timestamp.\r\n      const q = query(collection(db, path));\r\n      \r\n      // Use `onSnapshot` for real-time listening.\r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n        const fetchedMessages = [];\r\n        querySnapshot.forEach((doc) => {\r\n          fetchedMessages.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        // Sort the messages by timestamp to ensure they are in the correct order.\r\n        fetchedMessages.sort((a, b) => (a.timestamp?.toMillis() || 0) - (b.timestamp?.toMillis() || 0));\r\n        setMessages(fetchedMessages);\r\n      }, (error) => {\r\n        console.error(\"Error fetching messages:\", error);\r\n        setError(\"Failed to fetch messages. Check your Firestore rules.\");\r\n      });\r\n      \r\n      // The return function from `useEffect` is a cleanup function.\r\n      // It will unsubscribe from the listener when the component unmounts.\r\n      return () => unsubscribe();\r\n    }\r\n  }, [isReady, db]);\r\n\r\n  // Use a separate useEffect to handle AI responses to user messages\r\n  useEffect(() => {\r\n    const lastMessage = messages[messages.length - 1];\r\n    // Check if the last message is from the user and an AI response is not already in progress.\r\n    if (db && lastMessage && lastMessage.userId === userId && !isAIGenerating) {\r\n      const getAIResponse = async () => {\r\n        setIsAIGenerating(true);\r\n        console.log(\"[AI] User sent a message. Generating AI response...\");\r\n\r\n        try {\r\n          // Prepare chat history for the API call.\r\n          // Note: The `map` function here creates a new array of objects with\r\n          // the required `role` and `parts` structure for the API.\r\n          const chatHistory = messages.map(msg => ({\r\n            role: msg.userId === userId ? 'user' : 'model',\r\n            parts: [{ text: msg.text }]\r\n          }));\r\n          \r\n          const payload = { contents: chatHistory };\r\n          const apiKey = \"\"; // API key is automatically provided by the Canvas environment\r\n          const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n          \r\n          // Use exponential backoff for API calls to handle potential throttling\r\n          let response;\r\n          let retryCount = 0;\r\n          const maxRetries = 5;\r\n          const initialDelay = 1000;\r\n\r\n          while (retryCount < maxRetries) {\r\n            try {\r\n              response = await fetch(apiUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload)\r\n              });\r\n              if (response.status !== 429) { // 429 is Too Many Requests\r\n                break; // Success or non-retryable error, so break\r\n              }\r\n              // If we get a 429, log it and prepare for retry\r\n              console.warn(`[API] Rate limit hit. Retrying in ${initialDelay * Math.pow(2, retryCount)}ms...`);\r\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\r\n              retryCount++;\r\n            } catch (fetchError) {\r\n              // Non-HTTP errors (e.g., network issues)\r\n              console.error(`[API] Fetch failed. Retrying...`, fetchError);\r\n              await new Promise(resolve => setTimeout(resolve, initialDelay * Math.pow(2, retryCount)));\r\n              retryCount++;\r\n            }\r\n          }\r\n          \r\n          if (!response || !response.ok) {\r\n            throw new Error(`API error: ${response?.statusText || 'Unknown error'}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          let responseText = \"Sorry, I couldn't generate a response.\";\r\n          if (result.candidates && result.candidates.length > 0 &&\r\n              result.candidates[0].content && result.candidates[0].content.parts &&\r\n              result.candidates[0].content.parts.length > 0) {\r\n            responseText = result.candidates[0].content.parts[0].text;\r\n            console.log(\"[AI] Generated AI response successfully.\");\r\n          }\r\n\r\n          // Add the AI's response to Firestore.\r\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n          await addDoc(collection(db, path), {\r\n            text: responseText,\r\n            userId: 'bot', // Use a consistent ID for the bot\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        } catch (e) {\r\n          console.error(\"[AI ERROR] Error getting AI response:\", e);\r\n          // Add an error message from the bot if the API call fails.\r\n          const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n          const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n          await addDoc(collection(db, path), {\r\n            text: `Sorry, I am having trouble processing that request. Error: ${e.message}`,\r\n            userId: 'bot',\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        } finally {\r\n          setIsAIGenerating(false);\r\n        }\r\n      };\r\n\r\n      getAIResponse();\r\n    }\r\n  }, [messages, db, isAIGenerating, userId]);\r\n\r\n  // Function to handle sending a new message.\r\n  const handleSendMessage = async () => {\r\n    if (input.trim() === '' || !db || !userId) {\r\n      console.log(\"Cannot send empty message or Firebase not ready.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Define the path for the public chat messages.\r\n      const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n      const path = `/artifacts/${currentAppId}/public/data/messages`;\r\n      \r\n      // Add a new document to the 'messages' collection with the user ID, message text, and a timestamp.\r\n      await addDoc(collection(db, path), {\r\n        text: input,\r\n        userId: userId,\r\n        timestamp: serverTimestamp(),\r\n      });\r\n      // Clear the input field after sending.\r\n      setInput('');\r\n    } catch (error) {\r\n      console.error(\"Error adding document: \", error);\r\n      setError(\"Failed to send message. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Function to handle key presses in the input field.\r\n  const handleKeyDown = (event) => {\r\n    // If the 'Enter' key is pressed, send the message.\r\n    if (event.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // A useEffect to scroll the chat window to the bottom whenever new messages arrive.\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // CSS for the dot-flashing loading animation. This is in a template literal\r\n  // because we don't have an external CSS file for React immersives.\r\n  const dotFlashingCss = `\r\n    .dot-flashing {\r\n      position: relative;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite linear alternate;\r\n      animation-delay: .5s;\r\n    }\r\n    .dot-flashing::before, .dot-flashing::after {\r\n      content: '';\r\n      display: inline-block;\r\n      position: absolute;\r\n      top: 0;\r\n    }\r\n    .dot-flashing::before {\r\n      left: -10px;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite alternate;\r\n    }\r\n    .dot-flashing::after {\r\n      left: 10px;\r\n      width: 5px;\r\n      height: 5px;\r\n      border-radius: 5px;\r\n      background-color: #efefef;\r\n      color: #efefef;\r\n      animation: dotFlashing 1s infinite alternate;\r\n      animation-delay: 1s;\r\n    }\r\n    @keyframes dotFlashing {\r\n      0% { background-color: #efefef; }\r\n      50%, 100% { background-color: #9e9e9e; }\r\n    }\r\n  `;\r\n\r\n  return (\r\n    // Main container with a dark background and full viewport height/width.\r\n    // It uses flexbox to center the chat container both horizontally and vertically.\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\">\r\n      {/* Inject the custom CSS for the loading animation */}\r\n      <style>{dotFlashingCss}</style>\r\n\r\n      {/* The main chat container. It's a responsive box with a dark background. */}\r\n      <div className=\"flex flex-col w-full max-w-sm md:max-w-md bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\">\r\n        \r\n        {/* Header section for the chat window. */}\r\n        <div className=\"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\">\r\n          AI Chatbot\r\n        </div>\r\n\r\n        {/* Display area for the messages. It's a scrollable container. */}\r\n        <div className=\"flex-1 p-4 overflow-y-auto space-y-4\">\r\n          {/* Display loading, error, or messages */}\r\n          {!isReady && !error && (\r\n            <div className=\"text-center text-slate-400 mt-10\">\r\n              Initializing Firebase...\r\n            </div>\r\n          )}\r\n          {error && (\r\n            <div className=\"text-center text-red-400 mt-10 p-4 bg-red-900 rounded-lg\">\r\n              Error: {error}\r\n            </div>\r\n          )}\r\n          {isReady && !error && messages.map((message, index) => (\r\n            // A message bubble. We use different styles for the current user's messages and the bot's.\r\n            <div\r\n              key={index}\r\n              className={`flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`}\r\n            >\r\n              <div\r\n                className={`max-w-[70%] p-3 rounded-2xl shadow-md ${\r\n                  message.userId === userId\r\n                    ? 'bg-blue-600 text-white' // User's message style\r\n                    : 'bg-slate-700 text-slate-100' // Bot's message style\r\n                } ${\r\n                  message.userId === userId\r\n                    ? 'rounded-br-none' // Make the bottom-right corner sharp for user messages\r\n                    : 'rounded-bl-none' // Make the bottom-left corner sharp for bot messages\r\n                }`}\r\n              >\r\n                {/* Conditionally render the bot icon for bot messages */}\r\n                {message.userId === 'bot' && <Bot size={16} className=\"inline-block mr-2\" />}\r\n                {/* The message text. */}\r\n                <p className=\"text-sm break-words inline-block\">{message.text}</p>\r\n                {/* Optional: Display the user ID for collaborative context */}\r\n                {message.userId !== 'bot' && (\r\n                  <div className=\"text-xs text-slate-400 mt-1\">\r\n                    User: {message.userId.substring(0, 8)}...\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* AI generating message indicator */}\r\n          {isAIGenerating && (\r\n            <div className=\"flex items-start justify-start\">\r\n              <div className=\"p-3 rounded-2xl bg-slate-700 text-slate-100 max-w-[70%] rounded-bl-none\">\r\n                <Bot size={16} className=\"inline-block mr-2\" />\r\n                <div className=\"dot-flashing inline-block align-middle ml-2\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* This empty div is our scroll anchor. */}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Input area for sending messages. */}\r\n        <div className=\"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl flex items-center\">\r\n          {/* The text input field. */}\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            // Disable input if not ready or if an error occurred\r\n            disabled={!isReady || isAIGenerating || !!error}\r\n          />\r\n          {/* The send button. It's disabled if the input is empty or not authenticated. */}\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"ml-3 p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            disabled={!isReady || input.trim() === '' || isAIGenerating || !!error}\r\n          >\r\n            {/* Using the Send icon from lucide-react */}\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}