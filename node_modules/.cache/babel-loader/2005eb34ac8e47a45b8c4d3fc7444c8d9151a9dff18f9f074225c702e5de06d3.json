{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';\nimport { Send } from 'lucide-react'; // Using Lucide for a modern icon\n\n// This is the main App component for our chat application.\n// It handles all the UI, state management, and Firebase interactions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State to hold the chat messages. An array of objects.\n  const [messages, setMessages] = useState([]);\n  // State to hold the user's input in the text field.\n  const [input, setInput] = useState('');\n  // State to hold the Firebase database instance.\n  const [db, setDb] = useState(null);\n  // State to hold the Firebase authentication instance.\n  const [auth, setAuth] = useState(null);\n  // State to hold the current user's ID.\n  const [userId, setUserId] = useState(null);\n  // State to track if the application is ready and authenticated.\n  const [isAuthReady, setIsAuthReady] = useState(false);\n\n  // useEffect to handle Firebase initialization and authentication.\n  // The empty dependency array `[]` ensures this runs only once on component mount.\n  useEffect(() => {\n    // These are provided by the Canvas environment.\n    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\n    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n\n    // IMPORTANT: Replace the placeholder values in this object with your actual Firebase config.\n    // You can get this from your Firebase Project Settings -> General -> Your Apps.\n    const customFirebaseConfig = {\n      ...firebaseConfig\n      // Example:\n      // apiKey: \"AIzaSyC_REPLACE_WITH_YOUR_KEY\",\n      // authDomain: \"your-project-id.firebaseapp.com\",\n      // projectId: \"your-project-id\",\n      // storageBucket: \"your-project-id.appspot.com\",\n      // messagingSenderId: \"1234567890\",\n      // appId: \"1:1234567890:web:abcdef1234567890\",\n    };\n    try {\n      // Initialize Firebase application.\n      const app = initializeApp(customFirebaseConfig);\n      // Get the Firestore and Auth instances.\n      const firestore = getFirestore(app);\n      const authInstance = getAuth(app);\n\n      // We'll sign in the user. We'll try to use the custom token if provided,\n      // otherwise, we'll sign in anonymously.\n      const authenticateUser = async () => {\n        try {\n          if (initialAuthToken) {\n            await signInWithCustomToken(authInstance, initialAuthToken);\n          } else {\n            await signInAnonymously(authInstance);\n          }\n        } catch (error) {\n          console.error(\"Firebase authentication failed:\", error);\n          // Fallback to anonymous sign-in in case of token issues\n          await signInAnonymously(authInstance);\n        }\n      };\n\n      // Listen for authentication state changes. This is the correct way to handle\n      // authentication and ensure Firestore operations are only performed once the\n      // user is signed in.\n      onAuthStateChanged(authInstance, user => {\n        if (user) {\n          console.log(\"User signed in with UID:\", user.uid);\n          setUserId(user.uid);\n          setDb(firestore);\n          setAuth(authInstance);\n          setIsAuthReady(true);\n        } else {\n          console.log(\"No user signed in. Attempting anonymous sign-in.\");\n          authenticateUser();\n        }\n      });\n    } catch (error) {\n      // Log any initialization errors. This is what you were seeing in the screenshot.\n      console.error(\"Firebase initialization failed:\", error);\n    }\n  }, []); // The empty array ensures this effect runs only once.\n\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\n  // This effect will run whenever `isAuthReady` or `db` changes.\n  useEffect(() => {\n    // We only attach the listener if Firebase is fully initialized and authenticated.\n    if (isAuthReady && db) {\n      // Define the collection path for our chat messages.\n      // This path is for public data, so all users can see it.\n      const path = `/artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}/public/data/messages`;\n\n      // Create a query to get messages from the 'messages' collection, ordered by timestamp.\n      const q = query(collection(db, path));\n\n      // Use `onSnapshot` for real-time listening.\n      const unsubscribe = onSnapshot(q, querySnapshot => {\n        const fetchedMessages = [];\n        querySnapshot.forEach(doc => {\n          fetchedMessages.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        // Sort the messages by timestamp to ensure they are in the correct order.\n        fetchedMessages.sort((a, b) => {\n          var _a$timestamp, _b$timestamp;\n          return ((_a$timestamp = a.timestamp) === null || _a$timestamp === void 0 ? void 0 : _a$timestamp.toMillis()) - ((_b$timestamp = b.timestamp) === null || _b$timestamp === void 0 ? void 0 : _b$timestamp.toMillis());\n        });\n        setMessages(fetchedMessages);\n      }, error => {\n        console.error(\"Error fetching messages:\", error);\n      });\n\n      // The return function from `useEffect` is a cleanup function.\n      // It will unsubscribe from the listener when the component unmounts.\n      return () => unsubscribe();\n    }\n  }, [isAuthReady, db]);\n\n  // Function to handle sending a new message.\n  const handleSendMessage = async () => {\n    if (input.trim() === '' || !db || !userId) {\n      console.log(\"Cannot send empty message or Firebase not ready.\");\n      return;\n    }\n    try {\n      // Define the path for the public chat messages.\n      const path = `/artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}/public/data/messages`;\n\n      // Add a new document to the 'messages' collection with the user ID, message text, and a timestamp.\n      await addDoc(collection(db, path), {\n        text: input,\n        userId: userId,\n        timestamp: serverTimestamp()\n      });\n      // Clear the input field after sending.\n      setInput('');\n    } catch (error) {\n      console.error(\"Error adding document: \", error);\n    }\n  };\n\n  // Function to handle key presses in the input field.\n  const handleKeyDown = event => {\n    // If the 'Enter' key is pressed, send the message.\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // Main container with a dark background and full viewport height/width.\n    // It uses flexbox to center the chat container both horizontally and vertically.\n    _jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full max-w-sm md:max-w-md bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\",\n          children: \"AI Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 p-4 overflow-y-auto space-y-4\",\n          children: [!isAuthReady && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-slate-400 mt-10\",\n            children: \"Initializing Firebase...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), isAuthReady && messages.map((message, index) =>\n          /*#__PURE__*/\n          // A message bubble. We use different styles for the current user's messages.\n          _jsxDEV(\"div\", {\n            className: `flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `max-w-[70%] p-3 rounded-lg shadow-md ${message.userId === userId ? 'bg-blue-600 text-white rounded-br-none' : 'bg-slate-700 text-slate-100 rounded-bl-none'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm break-words\",\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-slate-400 mt-1\",\n                children: [\"User: \", message.userId.substring(0, 8), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\",\n            placeholder: \"Type your message...\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyDown: handleKeyDown\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            className: \"ml-3 p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\",\n            disabled: !isAuthReady || input.trim() === '',\n            children: /*#__PURE__*/_jsxDEV(Send, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"MzVMFXNXc3Kkm1IrpKACfhky4jM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","initializeApp","getFirestore","collection","query","onSnapshot","addDoc","serverTimestamp","getAuth","signInWithCustomToken","signInAnonymously","onAuthStateChanged","Send","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","db","setDb","auth","setAuth","userId","setUserId","isAuthReady","setIsAuthReady","appId","__app_id","firebaseConfig","__firebase_config","JSON","parse","initialAuthToken","__initial_auth_token","customFirebaseConfig","app","firestore","authInstance","authenticateUser","error","console","user","log","uid","path","q","unsubscribe","querySnapshot","fetchedMessages","forEach","doc","push","id","data","sort","a","b","_a$timestamp","_b$timestamp","timestamp","toMillis","handleSendMessage","trim","text","handleKeyDown","event","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","substring","type","placeholder","value","onChange","e","target","onKeyDown","onClick","disabled","size","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore, collection, query, onSnapshot, addDoc, serverTimestamp } from 'firebase/firestore';\r\nimport { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';\r\nimport { Send } from 'lucide-react'; // Using Lucide for a modern icon\r\n\r\n// This is the main App component for our chat application.\r\n// It handles all the UI, state management, and Firebase interactions.\r\nexport default function App() {\r\n  // State to hold the chat messages. An array of objects.\r\n  const [messages, setMessages] = useState([]);\r\n  // State to hold the user's input in the text field.\r\n  const [input, setInput] = useState('');\r\n  // State to hold the Firebase database instance.\r\n  const [db, setDb] = useState(null);\r\n  // State to hold the Firebase authentication instance.\r\n  const [auth, setAuth] = useState(null);\r\n  // State to hold the current user's ID.\r\n  const [userId, setUserId] = useState(null);\r\n  // State to track if the application is ready and authenticated.\r\n  const [isAuthReady, setIsAuthReady] = useState(false);\r\n\r\n  // useEffect to handle Firebase initialization and authentication.\r\n  // The empty dependency array `[]` ensures this runs only once on component mount.\r\n  useEffect(() => {\r\n    // These are provided by the Canvas environment.\r\n    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};\r\n    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n\r\n    // IMPORTANT: Replace the placeholder values in this object with your actual Firebase config.\r\n    // You can get this from your Firebase Project Settings -> General -> Your Apps.\r\n    const customFirebaseConfig = {\r\n      ...firebaseConfig,\r\n      // Example:\r\n      // apiKey: \"AIzaSyC_REPLACE_WITH_YOUR_KEY\",\r\n      // authDomain: \"your-project-id.firebaseapp.com\",\r\n      // projectId: \"your-project-id\",\r\n      // storageBucket: \"your-project-id.appspot.com\",\r\n      // messagingSenderId: \"1234567890\",\r\n      // appId: \"1:1234567890:web:abcdef1234567890\",\r\n    };\r\n\r\n    try {\r\n      // Initialize Firebase application.\r\n      const app = initializeApp(customFirebaseConfig);\r\n      // Get the Firestore and Auth instances.\r\n      const firestore = getFirestore(app);\r\n      const authInstance = getAuth(app);\r\n\r\n      // We'll sign in the user. We'll try to use the custom token if provided,\r\n      // otherwise, we'll sign in anonymously.\r\n      const authenticateUser = async () => {\r\n        try {\r\n          if (initialAuthToken) {\r\n            await signInWithCustomToken(authInstance, initialAuthToken);\r\n          } else {\r\n            await signInAnonymously(authInstance);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Firebase authentication failed:\", error);\r\n          // Fallback to anonymous sign-in in case of token issues\r\n          await signInAnonymously(authInstance);\r\n        }\r\n      };\r\n\r\n      // Listen for authentication state changes. This is the correct way to handle\r\n      // authentication and ensure Firestore operations are only performed once the\r\n      // user is signed in.\r\n      onAuthStateChanged(authInstance, (user) => {\r\n        if (user) {\r\n          console.log(\"User signed in with UID:\", user.uid);\r\n          setUserId(user.uid);\r\n          setDb(firestore);\r\n          setAuth(authInstance);\r\n          setIsAuthReady(true);\r\n        } else {\r\n          console.log(\"No user signed in. Attempting anonymous sign-in.\");\r\n          authenticateUser();\r\n        }\r\n      });\r\n    } catch (error) {\r\n      // Log any initialization errors. This is what you were seeing in the screenshot.\r\n      console.error(\"Firebase initialization failed:\", error);\r\n    }\r\n  }, []); // The empty array ensures this effect runs only once.\r\n\r\n  // useEffect to listen for real-time updates to the chat messages from Firestore.\r\n  // This effect will run whenever `isAuthReady` or `db` changes.\r\n  useEffect(() => {\r\n    // We only attach the listener if Firebase is fully initialized and authenticated.\r\n    if (isAuthReady && db) {\r\n      // Define the collection path for our chat messages.\r\n      // This path is for public data, so all users can see it.\r\n      const path = `/artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}/public/data/messages`;\r\n      \r\n      // Create a query to get messages from the 'messages' collection, ordered by timestamp.\r\n      const q = query(collection(db, path));\r\n      \r\n      // Use `onSnapshot` for real-time listening.\r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n        const fetchedMessages = [];\r\n        querySnapshot.forEach((doc) => {\r\n          fetchedMessages.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        // Sort the messages by timestamp to ensure they are in the correct order.\r\n        fetchedMessages.sort((a, b) => a.timestamp?.toMillis() - b.timestamp?.toMillis());\r\n        setMessages(fetchedMessages);\r\n      }, (error) => {\r\n        console.error(\"Error fetching messages:\", error);\r\n      });\r\n      \r\n      // The return function from `useEffect` is a cleanup function.\r\n      // It will unsubscribe from the listener when the component unmounts.\r\n      return () => unsubscribe();\r\n    }\r\n  }, [isAuthReady, db]);\r\n\r\n  // Function to handle sending a new message.\r\n  const handleSendMessage = async () => {\r\n    if (input.trim() === '' || !db || !userId) {\r\n      console.log(\"Cannot send empty message or Firebase not ready.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Define the path for the public chat messages.\r\n      const path = `/artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}/public/data/messages`;\r\n      \r\n      // Add a new document to the 'messages' collection with the user ID, message text, and a timestamp.\r\n      await addDoc(collection(db, path), {\r\n        text: input,\r\n        userId: userId,\r\n        timestamp: serverTimestamp(),\r\n      });\r\n      // Clear the input field after sending.\r\n      setInput('');\r\n    } catch (error) {\r\n      console.error(\"Error adding document: \", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle key presses in the input field.\r\n  const handleKeyDown = (event) => {\r\n    // If the 'Enter' key is pressed, send the message.\r\n    if (event.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    // Main container with a dark background and full viewport height/width.\r\n    // It uses flexbox to center the chat container both horizontally and vertically.\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-slate-900 font-inter\">\r\n      {/* The main chat container. It's a responsive box with a dark background. */}\r\n      <div className=\"flex flex-col w-full max-w-sm md:max-w-md bg-slate-800 rounded-2xl shadow-xl overflow-hidden h-[80vh]\">\r\n        \r\n        {/* Header section for the chat window. */}\r\n        <div className=\"p-4 bg-slate-700 text-white text-center text-lg font-semibold border-b border-slate-600 rounded-t-2xl\">\r\n          AI Chatbot\r\n        </div>\r\n\r\n        {/* Display area for the messages. It's a scrollable container. */}\r\n        <div className=\"flex-1 p-4 overflow-y-auto space-y-4\">\r\n          {/* Display a loading message if Firebase isn't ready. */}\r\n          {!isAuthReady && (\r\n            <div className=\"text-center text-slate-400 mt-10\">\r\n              Initializing Firebase...\r\n            </div>\r\n          )}\r\n          {/* Map over the messages array to render each message. */}\r\n          {isAuthReady && messages.map((message, index) => (\r\n            // A message bubble. We use different styles for the current user's messages.\r\n            <div\r\n              key={index}\r\n              className={`flex ${message.userId === userId ? 'justify-end' : 'justify-start'}`}\r\n            >\r\n              <div\r\n                className={`max-w-[70%] p-3 rounded-lg shadow-md ${\r\n                  message.userId === userId\r\n                    ? 'bg-blue-600 text-white rounded-br-none'\r\n                    : 'bg-slate-700 text-slate-100 rounded-bl-none'\r\n                }`}\r\n              >\r\n                {/* The message text. */}\r\n                <p className=\"text-sm break-words\">{message.text}</p>\r\n                {/* Optional: Display the user ID below the message for collaborative context */}\r\n                <div className=\"text-xs text-slate-400 mt-1\">\r\n                  User: {message.userId.substring(0, 8)}...\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Input area for sending messages. */}\r\n        <div className=\"p-4 bg-slate-700 border-t border-slate-600 rounded-b-2xl flex items-center\">\r\n          {/* The text input field. */}\r\n          <input\r\n            type=\"text\"\r\n            className=\"flex-1 p-3 bg-slate-800 text-white placeholder-slate-400 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\"\r\n            placeholder=\"Type your message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n          {/* The send button. It's disabled if the input is empty or not authenticated. */}\r\n          <button\r\n            onClick={handleSendMessage}\r\n            className=\"ml-3 p-3 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            disabled={!isAuthReady || input.trim() === ''}\r\n          >\r\n            {/* Using the Send icon from lucide-react */}\r\n            <Send size={20} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,EAAEC,UAAU,EAAEC,KAAK,EAAEC,UAAU,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAoB;AACzG,SAASC,OAAO,EAAEC,qBAAqB,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,eAAe;AACrG,SAASC,IAAI,QAAQ,cAAc,CAAC,CAAC;;AAErC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACA,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACsB,EAAE,EAAEC,KAAK,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAClC;EACA,MAAM,CAACwB,IAAI,EAAEC,OAAO,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACtC;EACA,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC1C;EACA,MAAM,CAAC4B,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAM6B,KAAK,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGA,QAAQ,GAAG,gBAAgB;IAC3E,MAAMC,cAAc,GAAG,OAAOC,iBAAiB,KAAK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACF,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACpG,MAAMG,gBAAgB,GAAG,OAAOC,oBAAoB,KAAK,WAAW,GAAGA,oBAAoB,GAAG,IAAI;;IAElG;IACA;IACA,MAAMC,oBAAoB,GAAG;MAC3B,GAAGN;MACH;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC;IAED,IAAI;MACF;MACA,MAAMO,GAAG,GAAGrC,aAAa,CAACoC,oBAAoB,CAAC;MAC/C;MACA,MAAME,SAAS,GAAGrC,YAAY,CAACoC,GAAG,CAAC;MACnC,MAAME,YAAY,GAAGhC,OAAO,CAAC8B,GAAG,CAAC;;MAEjC;MACA;MACA,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;QACnC,IAAI;UACF,IAAIN,gBAAgB,EAAE;YACpB,MAAM1B,qBAAqB,CAAC+B,YAAY,EAAEL,gBAAgB,CAAC;UAC7D,CAAC,MAAM;YACL,MAAMzB,iBAAiB,CAAC8B,YAAY,CAAC;UACvC;QACF,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;UACvD;UACA,MAAMhC,iBAAiB,CAAC8B,YAAY,CAAC;QACvC;MACF,CAAC;;MAED;MACA;MACA;MACA7B,kBAAkB,CAAC6B,YAAY,EAAGI,IAAI,IAAK;QACzC,IAAIA,IAAI,EAAE;UACRD,OAAO,CAACE,GAAG,CAAC,0BAA0B,EAAED,IAAI,CAACE,GAAG,CAAC;UACjDpB,SAAS,CAACkB,IAAI,CAACE,GAAG,CAAC;UACnBxB,KAAK,CAACiB,SAAS,CAAC;UAChBf,OAAO,CAACgB,YAAY,CAAC;UACrBZ,cAAc,CAAC,IAAI,CAAC;QACtB,CAAC,MAAM;UACLe,OAAO,CAACE,GAAG,CAAC,kDAAkD,CAAC;UAC/DJ,gBAAgB,CAAC,CAAC;QACpB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA;EACA1C,SAAS,CAAC,MAAM;IACd;IACA,IAAI2B,WAAW,IAAIN,EAAE,EAAE;MACrB;MACA;MACA,MAAM0B,IAAI,GAAG,cAAc,OAAOjB,QAAQ,KAAK,WAAW,GAAGA,QAAQ,GAAG,gBAAgB,uBAAuB;;MAE/G;MACA,MAAMkB,CAAC,GAAG5C,KAAK,CAACD,UAAU,CAACkB,EAAE,EAAE0B,IAAI,CAAC,CAAC;;MAErC;MACA,MAAME,WAAW,GAAG5C,UAAU,CAAC2C,CAAC,EAAGE,aAAa,IAAK;QACnD,MAAMC,eAAe,GAAG,EAAE;QAC1BD,aAAa,CAACE,OAAO,CAAEC,GAAG,IAAK;UAC7BF,eAAe,CAACG,IAAI,CAAC;YAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;YAAE,GAAGF,GAAG,CAACG,IAAI,CAAC;UAAE,CAAC,CAAC;QACrD,CAAC,CAAC;QACF;QACAL,eAAe,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC;UAAA,IAAAC,YAAA,EAAAC,YAAA;UAAA,OAAK,EAAAD,YAAA,GAAAF,CAAC,CAACI,SAAS,cAAAF,YAAA,uBAAXA,YAAA,CAAaG,QAAQ,CAAC,CAAC,MAAAF,YAAA,GAAGF,CAAC,CAACG,SAAS,cAAAD,YAAA,uBAAXA,YAAA,CAAaE,QAAQ,CAAC,CAAC;QAAA,EAAC;QACjF7C,WAAW,CAACiC,eAAe,CAAC;MAC9B,CAAC,EAAGT,KAAK,IAAK;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;;MAEF;MACA;MACA,OAAO,MAAMO,WAAW,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,CAACtB,WAAW,EAAEN,EAAE,CAAC,CAAC;;EAErB;EACA,MAAM2C,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI7C,KAAK,CAAC8C,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC5C,EAAE,IAAI,CAACI,MAAM,EAAE;MACzCkB,OAAO,CAACE,GAAG,CAAC,kDAAkD,CAAC;MAC/D;IACF;IAEA,IAAI;MACF;MACA,MAAME,IAAI,GAAG,cAAc,OAAOjB,QAAQ,KAAK,WAAW,GAAGA,QAAQ,GAAG,gBAAgB,uBAAuB;;MAE/G;MACA,MAAMxB,MAAM,CAACH,UAAU,CAACkB,EAAE,EAAE0B,IAAI,CAAC,EAAE;QACjCmB,IAAI,EAAE/C,KAAK;QACXM,MAAM,EAAEA,MAAM;QACdqC,SAAS,EAAEvD,eAAe,CAAC;MAC7B,CAAC,CAAC;MACF;MACAa,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMyB,aAAa,GAAIC,KAAK,IAAK;IAC/B;IACA,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;MACzBL,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC;EAED;IAAA;IACE;IACA;IACAlD,OAAA;MAAKwD,SAAS,EAAC,oFAAoF;MAAAC,QAAA,eAEjGzD,OAAA;QAAKwD,SAAS,EAAC,uGAAuG;QAAAC,QAAA,gBAGpHzD,OAAA;UAAKwD,SAAS,EAAC,uGAAuG;UAAAC,QAAA,EAAC;QAEvH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAGN7D,OAAA;UAAKwD,SAAS,EAAC,sCAAsC;UAAAC,QAAA,GAElD,CAAC5C,WAAW,iBACXb,OAAA;YAAKwD,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EAAC;UAElD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACN,EAEAhD,WAAW,IAAIV,QAAQ,CAAC2D,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK;UAAA;UAC1C;UACAhE,OAAA;YAEEwD,SAAS,EAAE,QAAQO,OAAO,CAACpD,MAAM,KAAKA,MAAM,GAAG,aAAa,GAAG,eAAe,EAAG;YAAA8C,QAAA,eAEjFzD,OAAA;cACEwD,SAAS,EAAE,wCACTO,OAAO,CAACpD,MAAM,KAAKA,MAAM,GACrB,wCAAwC,GACxC,6CAA6C,EAChD;cAAA8C,QAAA,gBAGHzD,OAAA;gBAAGwD,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,EAAEM,OAAO,CAACX;cAAI;gBAAAM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAErD7D,OAAA;gBAAKwD,SAAS,EAAC,6BAA6B;gBAAAC,QAAA,GAAC,QACrC,EAACM,OAAO,CAACpD,MAAM,CAACsD,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,KACxC;cAAA;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC,GAhBDG,KAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAiBP,CACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN7D,OAAA;UAAKwD,SAAS,EAAC,4EAA4E;UAAAC,QAAA,gBAEzFzD,OAAA;YACEkE,IAAI,EAAC,MAAM;YACXV,SAAS,EAAC,0IAA0I;YACpJW,WAAW,EAAC,sBAAsB;YAClCC,KAAK,EAAE/D,KAAM;YACbgE,QAAQ,EAAGC,CAAC,IAAKhE,QAAQ,CAACgE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAC1CI,SAAS,EAAEnB;UAAc;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eAEF7D,OAAA;YACEyE,OAAO,EAAEvB,iBAAkB;YAC3BM,SAAS,EAAC,yIAAyI;YACnJkB,QAAQ,EAAE,CAAC7D,WAAW,IAAIR,KAAK,CAAC8C,IAAI,CAAC,CAAC,KAAK,EAAG;YAAAM,QAAA,eAG9CzD,OAAA,CAACF,IAAI;cAAC6E,IAAI,EAAE;YAAG;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;AAEV;AAAC3D,EAAA,CAnNuBD,GAAG;AAAA2E,EAAA,GAAH3E,GAAG;AAAA,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}