{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Desktop\\\\my-chatbot-app\\\\src\\\\AIChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\nimport { getFunctions, httpsCallable } from 'firebase/functions';\nimport { getFirestore, doc, onSnapshot, collection, addDoc, query, orderBy, serverTimestamp } from 'firebase/firestore';\n\n// Component to display a single message\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = ({\n  text,\n  from\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `flex my-2 ${from === 'user' ? 'justify-end' : 'justify-start'}`,\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `p-3 rounded-lg max-w-xs md:max-w-md lg:max-w-lg ${from === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 5\n}, this);\n\n// Component for the message input area\n_c = Message;\nconst MessageInput = ({\n  message,\n  setMessage,\n  handleSendMessage,\n  isSending\n}) => {\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-white border-t flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      onKeyDown: handleKeyDown,\n      className: \"flex-1 p-2 border rounded-lg focus:outline-none\",\n      placeholder: \"Type your message here...\",\n      disabled: isSending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      className: `ml-2 p-2 rounded-lg text-white ${isSending ? 'bg-gray-400' : 'bg-blue-500'}`,\n      disabled: isSending,\n      children: isSending ? 'Sending...' : 'Send'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n// Main Chatbot component\n_c2 = MessageInput;\nconst AIChatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const messagesEndRef = useRef(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [db, setDb] = useState(null);\n\n  // Initialize Firebase and sign in\n  useEffect(() => {\n    // Unconditionally initialize the Firebase app\n    if (typeof __firebase_config !== 'undefined' && __firebase_config) {\n      const app = initializeApp(__firebase_config);\n      setDb(getFirestore(app));\n      const auth = getAuth(app);\n      onAuthStateChanged(auth, user => {\n        if (user) {\n          setIsAuthenticated(true);\n        } else {\n          setIsAuthenticated(false);\n        }\n      });\n      if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {\n        signInWithCustomToken(auth, __initial_auth_token).catch(error => {\n          console.error(\"Error signing in with custom token:\", error);\n        });\n      } else {\n        signInAnonymously(auth).catch(error => {\n          console.error(\"Error signing in anonymously:\", error);\n        });\n      }\n    }\n  }, []);\n\n  // Listen for messages from Firestore\n  useEffect(() => {\n    if (db && typeof __app_id !== 'undefined') {\n      const q = query(collection(db, 'chats', __app_id, 'messages'), orderBy('createdAt'));\n      const unsubscribe = onSnapshot(q, snapshot => {\n        const newMessages = snapshot.docs.map(doc => doc.data());\n        setMessages(newMessages);\n      });\n      return () => unsubscribe();\n    }\n  }, [db]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!message.trim() || isSending || !isAuthenticated) return;\n    setIsSending(true);\n    const userMessage = {\n      text: message,\n      from: 'user',\n      createdAt: serverTimestamp()\n    };\n\n    // Optimistically add the message to the UI\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setMessage('');\n    try {\n      if (db) {\n        await addDoc(collection(db, 'chats', __app_id, 'messages'), userMessage);\n      } else {\n        throw new Error(\"Firestore database is not initialized.\");\n      }\n      const functions = getFunctions();\n      const callChatbot = httpsCallable(functions, 'chatbot');\n\n      // Note: The `messages` array passed here should contain only the necessary data, not the whole state\n      const messagesForFunction = [...messages, userMessage].map(msg => ({\n        text: msg.text,\n        from: msg.from\n      }));\n      await callChatbot({\n        messages: messagesForFunction\n      });\n    } catch (error) {\n      console.error(\"Error sending message or calling chatbot function:\", error);\n      const errorMessage = {\n        text: \"Sorry, I am unable to respond at this time.\",\n        from: \"ai\",\n        createdAt: serverTimestamp()\n      };\n      // Add error message to UI\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsSending(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        from: msg.from\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      message: message,\n      setMessage: setMessage,\n      handleSendMessage: sendMessage,\n      isSending: isSending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n_s(AIChatbot, \"+fqp+86tHQbzSwXaRYOGQ8tSyPA=\");\n_c3 = AIChatbot;\nexport default AIChatbot;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"MessageInput\");\n$RefreshReg$(_c3, \"AIChatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initializeApp","getAuth","signInAnonymously","signInWithCustomToken","onAuthStateChanged","getFunctions","httpsCallable","getFirestore","doc","onSnapshot","collection","addDoc","query","orderBy","serverTimestamp","jsxDEV","_jsxDEV","Message","text","from","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MessageInput","message","setMessage","handleSendMessage","isSending","handleKeyDown","e","key","type","value","onChange","target","onKeyDown","placeholder","disabled","onClick","_c2","AIChatbot","_s","messages","setMessages","setIsSending","messagesEndRef","isAuthenticated","setIsAuthenticated","db","setDb","__firebase_config","app","auth","user","__initial_auth_token","catch","error","console","__app_id","q","unsubscribe","snapshot","newMessages","docs","map","data","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","userMessage","createdAt","prevMessages","Error","functions","callChatbot","messagesForFunction","msg","errorMessage","index","ref","_c3","$RefreshReg$"],"sources":["C:/Users/Tommy/Desktop/my-chatbot-app/src/AIChatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFunctions, httpsCallable } from 'firebase/functions';\r\nimport { getFirestore, doc, onSnapshot, collection, addDoc, query, orderBy, serverTimestamp } from 'firebase/firestore';\r\n\r\n// Component to display a single message\r\nconst Message = ({ text, from }) => (\r\n    <div className={`flex my-2 ${from === 'user' ? 'justify-end' : 'justify-start'}`}>\r\n        <div className={`p-3 rounded-lg max-w-xs md:max-w-md lg:max-w-lg ${from === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`}>\r\n            <p>{text}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n// Component for the message input area\r\nconst MessageInput = ({ message, setMessage, handleSendMessage, isSending }) => {\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 bg-white border-t flex\">\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n                className=\"flex-1 p-2 border rounded-lg focus:outline-none\"\r\n                placeholder=\"Type your message here...\"\r\n                disabled={isSending}\r\n            />\r\n            <button\r\n                onClick={handleSendMessage}\r\n                className={`ml-2 p-2 rounded-lg text-white ${isSending ? 'bg-gray-400' : 'bg-blue-500'}`}\r\n                disabled={isSending}\r\n            >\r\n                {isSending ? 'Sending...' : 'Send'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Main Chatbot component\r\nconst AIChatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [isSending, setIsSending] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [db, setDb] = useState(null);\r\n\r\n    // Initialize Firebase and sign in\r\n    useEffect(() => {\r\n        // Unconditionally initialize the Firebase app\r\n        if (typeof __firebase_config !== 'undefined' && __firebase_config) {\r\n            const app = initializeApp(__firebase_config);\r\n            setDb(getFirestore(app));\r\n\r\n            const auth = getAuth(app);\r\n            onAuthStateChanged(auth, (user) => {\r\n                if (user) {\r\n                    setIsAuthenticated(true);\r\n                } else {\r\n                    setIsAuthenticated(false);\r\n                }\r\n            });\r\n\r\n            if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {\r\n                signInWithCustomToken(auth, __initial_auth_token).catch((error) => {\r\n                    console.error(\"Error signing in with custom token:\", error);\r\n                });\r\n            } else {\r\n                signInAnonymously(auth).catch((error) => {\r\n                    console.error(\"Error signing in anonymously:\", error);\r\n                });\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    // Listen for messages from Firestore\r\n    useEffect(() => {\r\n        if (db && typeof __app_id !== 'undefined') {\r\n            const q = query(collection(db, 'chats', __app_id, 'messages'), orderBy('createdAt'));\r\n            const unsubscribe = onSnapshot(q, (snapshot) => {\r\n                const newMessages = snapshot.docs.map(doc => doc.data());\r\n                setMessages(newMessages);\r\n            });\r\n            return () => unsubscribe();\r\n        }\r\n    }, [db]);\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }, [messages]);\r\n\r\n    const sendMessage = async () => {\r\n        if (!message.trim() || isSending || !isAuthenticated) return;\r\n\r\n        setIsSending(true);\r\n        const userMessage = { text: message, from: 'user', createdAt: serverTimestamp() };\r\n\r\n        // Optimistically add the message to the UI\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        setMessage('');\r\n\r\n        try {\r\n            if (db) {\r\n                await addDoc(collection(db, 'chats', __app_id, 'messages'), userMessage);\r\n            } else {\r\n                throw new Error(\"Firestore database is not initialized.\");\r\n            }\r\n            \r\n            const functions = getFunctions();\r\n            const callChatbot = httpsCallable(functions, 'chatbot');\r\n            \r\n            // Note: The `messages` array passed here should contain only the necessary data, not the whole state\r\n            const messagesForFunction = [...messages, userMessage].map(msg => ({ text: msg.text, from: msg.from }));\r\n            await callChatbot({ messages: messagesForFunction });\r\n\r\n        } catch (error) {\r\n            console.error(\"Error sending message or calling chatbot function:\", error);\r\n            const errorMessage = { text: \"Sorry, I am unable to respond at this time.\", from: \"ai\", createdAt: serverTimestamp() };\r\n            // Add error message to UI\r\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsSending(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col h-full bg-gray-100\">\r\n            <div className=\"flex-1 overflow-y-auto p-4\">\r\n                {messages.map((msg, index) => (\r\n                    <Message key={index} text={msg.text} from={msg.from} />\r\n                ))}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            <MessageInput\r\n                message={message}\r\n                setMessage={setMessage}\r\n                handleSendMessage={sendMessage}\r\n                isSending={isSending}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AIChatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}